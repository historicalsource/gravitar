	.TITLE LOOSND - POKEY SOUNDS
	.RADIX 16
	.ENABL AMA
	.NLIST
	.INCLUDE LOONYC
	.INCLUDE HLL65F		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.LIST
	.PAGE
	.SBTTL GLOBLS
;ENTRY POINTS (AS SUBROUTINES)
	.GLOBL SNDON,MODSND,INISOU,ATRAFL
				;
NCHANL	=10
	.GLOBB SINDEX,POINT,CURRENT,FRAMES,COUNT1
	.GLOBB TEMPA,PLADED,FRAME
	.GLOBL SFREQ,COMTIMER
	.GLOBL HSCFLG,COMTIM
	.CSECT AS2POK
	.PAGE
	.SBTTL SOUND DESCRIPTION
;THE FOLLOWING MUST BE DEFINED SOME WHERE IN YOUR RAM ALLOCATION
;SOUND ROUTINE VARIABLES
	
	.REPT 0
POINT:	.BLKB NCHANL			;POINTER OFFSET INTO DATA TABLES(IF 0, CHANNEL NOT ACTIVE)
CURRENT:.BLKB NCHANL			;OUTPUT VALUE
FRAMES:	.BLKB NCHANL			;FRAMES UNTIL NEXT CHANGE
COUNT:	.BLKB NCHANL			;COUNT OF TOTAL CHANGES
;*** NOTE: 'IDLEV' CAN BE REPLACED BY A 6 BYTE TABLE WITH
;          NO CHANGE TO THE CODE. USING RAM ALLOWS YOU TO 
;	   CHANGE THE OUTPUT SOUND WITHOUT USING 'STSOUND'
;	   BY SIMPLY PUTTING THE DESIRED SOUND INFORMATION
;	   INTO THE ABOVE 6 BYTE. THE SOUND ROUTINES WILL
;	   CONTINUE TO OUTPUT THIS 'FORCED' SOUND UNTIL
;	   YOU CALL 'STSOUND' OR PUT SOME OTHER VALUE INTO
;	   'IDLEV'. IF YOU USE A TABLE, THE FOLLOWING DATA
;	   IS RECOMENDED:
;	IDLEV:	.BYTE 0C0,0,1F,80,0FE,80
;*************************************************************
;
	.ENDR
;EACH TABLE ENTRY IS 4 BYTES DESCRIBING A SEQUENCE, CONSISTING OF:
STVAL	=0			;VALUE TO START SEQUENCE
FRCNT	=1			;# OF FRAMES BEFORE ANY CHANGE
CHANGE	=2			;AMOUNT OF CHANGE
NUMBER	=3			;TOTAL NUMBER OF CHANGES IN THIS SEQUENCE
AUDF1	=POKEY
AUDCTL	=POKEY+8
AUD2F1	=POKEY2
AUD2CT	=POKEY2+8
;EX1: 0FF,1,-1,6 DESCRIBES THE FOLLOWING SEQUENCE
;	0FF,0FE,0FD,0FC,0FB,0FA,0F9
;EX2: 0,45,0,1 WILL OUTPUT 0 FOR 46 FRAMES
;
	.PAGE
	.SBTTL OFFSET MACROS FOR SOUND ROUTINES
	.MACRO OFFSET,LABEL
	.IRPC X,<12345678>
	.IRPC Y,FA
	.IF DF,LABEL''X''Y
	.BYTE <LABEL''X''Y-SOUND>/2-2
	.IFF
	.BYTE 0
	.ENDC
	.ENDR
	.ENDR
	SID'LABEL=.-PNTRS-1
	.ENDM
;
;THE ABOVE MACRO GENERATES THE OFFSETS FROM THE 'SOUND' BASE ADDRESS
;FOR A CHANNEL OF DATA.
;IF LESS THAN 6 CHANNELS ARE USED, THE REMAINING POINTERS ARE SET TO 0
;A 0 VALUE POINTER INDICATES AN IDLE CHANNEL.
;
;EX: SOUND: .BYTE 0
;
;    CH1:   .BYTE 0,45,0,1
;    CH2:   .BYTE 0,45,0,2,3,7,9,1
;
;BY CALLING 'OFFSET CH' , THE FOLLOWING WILL BE PLACED IN LINE
;	    .BYTE CH1-SOUND
;	    .BYTE CH2-SOUND
;	    .BYTE 0,0,0,0
;
	.SBTTL ROTBERG NOTE MACRO
	.MACRO PLUCK DUR
	.BYTE ^H0A6,4,^H0FF,4
	.BYTE ^H0A2,DUR-^H10,0,1
	.ENDM
	.PAGE
	.SBTTL SOUND TABLES
;
;TABLES OF OFFSET POINTER FOR SOUNDS. (6 BYTES PER SOUND NUMBER)
PNTRS:
	OFFSET SF		;SAUCER FIRE (CH2)
	OFFSET P0F		;SHIP FIRE (CH1), PLAYER 0
	OFFSET P1F		;SHIP FIRE (CH4), PLAYER 1
	OFFSET RI		;PLAYER 0 REENTER (CH1)
	OFFSET	RO		;PLAYER 1 REENTER (CH4)
	OFFSET EL		;EXTRA LIFE (CH3)
	OFFSET XP		;EXPLOSION SOUND (CH 7 & 8)
	OFFSET TH		;THRUST SOUND (CH5)
	OFFSET F0
	OFFSET FS
	OFFSET CR		;GATES OF (HELL)
	OFFSET S0		;SHIELD SOUND (0)
	OFFSET DS		;SHIELD SOUND
	OFFSET MC
	OFFSET SS
PTLEN	=.-PNTRS
;AUDIO CONTROL CHANNEL VALUE (1 BYTE PRE SOUND NUMBER)
AUDCV	=00
AUDCV2	=00
	
;SOUND TABLES
				;ALL OF THESE LABELS GO
				;HRE SO THEY HAVE AN
				;OFFSET OF 0, WHICH
				;PREVENTS THE SOUND FROM
				;AFFECTING THOSE CHANNELS
				;WHICH HAVE AN OFFSET
				;OF 0
SOUND=.-6
	.PAGE
				;A GOOD PLACE FOR THE CHECKSUM
;DATA STRUCTURE:
;A CHANNEL CONSISTS OF A SERIES OF 4 BYTE SEQUENCES:
;	BYTE		FUNCTION
;	 1		 STARTING VALUE OF SEQUENCE
;	 2		 # OF FRAMES BEFORE NEXT CHANGE
;	 3		 AMOUNT OF CHANGE (SEE NOTE 1)
;	 4		 TOTAL NUMBER OF CHANGES+1 (# OF DIFFERENT VALUES)
;TO STOP A CHANNEL, PUT IN 0,0
;TO LOOP BACK, PUT IN X,0, WHERE X=
;<OFFSET FROM SOUND: OF RESTART LOC>/2
;NOTE 1: FOR NOISE/AMPLITUDE CHANNEL, AMPLITUDE WILL
;NOT OVERFLOW INTO NOISE
;
;
; SAUCER FIRE
SF2F:	.BYTE 10,8,0BF,20
	.BYTE 0,0
SF2A:	.BYTE 0A7,20,0FF,8
	.BYTE 0,0
;
; SHIP FIRE, PLAYER 0
P0F1F:	.BYTE 10,1,1,60
	.BYTE 0,0
P0F1A:	.BYTE 0A4,10,-1,04
	.BYTE 0,0
P0E1F:	.BYTE 0A,0FF,0,10
	.BYTE 0,0
P0E1A:	.BYTE 4F,30,-1,0A
	.BYTE 46,20,-1,06
	.BYTE 0,0
;
; SHIP FIRE, PLAYER 1
P1F4F:	.BYTE 24,01,3,40
	.BYTE 0,0
P1F4A=P0F1A
P1E4F:	.BYTE 09,0FF,0,10
	.BYTE 0,0
P1E4A=P0E1A
; SHIELD SOUND
S01F:	.BYTE 30,02,0,0F
	.BYTE 0,0
S01A:	.BYTE 0C0,1,2,0F
	.BYTE 0,0
S14F=S01F		;OTHER PLAYER SAME SOUND
S14A=S01A
;
; EXTRA LIFE
EL3F:	.BYTE 06,0E0,0,1,5,0E0,0,1
	.BYTE 0,0
EL3A:	.REPT 6
	.BYTE 0AF,10,0,1,0A0,10,0,1
	.ENDR
; FUSE SOUND
F03F:	.BYTE 10,2, 0,0F
	.BYTE 0,0
F03A:	.BYTE 0A7,10,0,0F
	.BYTE 0,0
;
; EXPLOSION SOUND
XP7F:	.BYTE 0A0,1,0FE,8,0A0,1,0FE,4
	.BYTE 098,10,4,10
	.BYTE 0,0
XP7A:	.BYTE 82,2,1,4,8C,8,0FF,3
	.BYTE 80,4,0,1
	.BYTE 8C,20,0FF,1,86,40,0FF,1
	.BYTE 82,40,0FF,1
	.BYTE 81,40,0FF,1
	.BYTE 0,0
XP8F:	.BYTE 0C0,10,4,10
	.BYTE 0,0
XP8A:	.BYTE 86,50,0FE,3
	.BYTE 0,0
TH5F:	.BYTE 98,7,0,1
	.BYTE 0,0
TH5A:	.BYTE 84,7,0,1
	.BYTE 0,0
RI6A:	.BYTE 0A1,11,1,3
	.BYTE 0A3,11,-1,1
	.BYTE 66,0
RI6F: 	.BYTE -1,8,0,5
	.BYTE 6B,0

RO6A:	.BYTE 0A1,8,1,3
	.BYTE 0A3,8,-1,1
	.BYTE 6E,0
RO6F:	.BYTE -1,8,0,5
	.BYTE 73,0

FS6A:	.BYTE 0A2,10,0,16
	.BYTE 0,0
FS6F:	.BYTE 0F6,10,-9,0A
	.BYTE 93,10,9,0B
	.BYTE 0,0

CR7A:	.BYTE 0A7,0A1,0,3
	.BYTE 0,0

CR7F:	.BYTE -1,0A1,0,3
	.BYTE 0,0
CR8A:	.BYTE 0A7,0A1,0,3
	.BYTE 0,0
CR8F:	.BYTE 0FD,0A1,0,3
	.BYTE 0,0

DS7A:	.BYTE 0A4,11,0,5
	.BYTE 8A,0
DS7F:	.BYTE -1,11,-8,5
	.BYTE 8D,0
DS8A:	.BYTE 0A4,11,0,5
	.BYTE 90,0
DS8F:	.BYTE 0FE,11,-8,5
	.BYTE 93,0

SS6F:	.BYTE 0F6,8,-9,0A
	.BYTE 93,8,9,0B
	.BYTE 96,0
SS6A:	.BYTE 0A2,8,0,15
	.BYTE 9B,0
MC4F:	.BYTE 80,8,-8,3
	.BYTE 70,8,-8,3
	.BYTE 60,8,-8,3
	.BYTE 50,8,-8,3
	.BYTE 40,8,-8,3
	.BYTE 0,0
MC4A:	.BYTE 0A4,8,0,14
	.BYTE 0,0
	.PAGE
FU0SN::	LDA #SIDF0		;FUSE, PLYR 0
	BNE SNDON
SH0SN::	LDA #SIDS0
	BNE SNDON		;SHIELD PLAYER 0
SAUCSN::LDA #SIDSF		;SAUCER FIRE
	BNE SNDON
PL0FIR::LDA #SIDP0F		;PLAYER 0 FIRE
	BNE SNDON
PL1FIR::LDA #SIDP1F		;PLAYER 1 FIRE
	BNE SNDON
EXTLIF::LDA #SIDEL		;EXTRA LIFE
	BNE SNDON
EXPLOS::LDA #SIDXP		;EXPLOSION
	BNE SNDON
THRUSN::LDA #SIDTH		;THRUST SOUND
	BNE SNDON
REINSN: LDA #SIDRI
	BNE SNDON
REOUSN: LDA #SIDRO
	BNE SNDON
FUCKSN: LDA #SIDFS
	BNE SNDON
CREDSN: LDA #SIDCR
	BNE BADHAB
DPSPSN: LDA #SIDDS
	BNE SNDON
MICOSN: LDA #SIDMC
	BNE SNDON
SOSYSN: LDA #SIDSS
	BNE SNDON
SNDON:	BIT ATRAFL 
	IFEQ
	RTS
	THEN
BADHAB:	STX TEMPA
	STY TEMPA+1
	TAY			;USE AS INDEX
	LDX I,NCHANL-1			;NO.
	BEGIN			;--;LOOP FOR EACH 1/2 CHANNEL
	LDA Y,PNTRS
	IFNE			;IF POINTER 0 DONT TOUCH THIS CHANNEL
	STX SINDEX
	STA X,POINT		;IF NOT SET UP POINTER 
	LDA I,1
	STA X,FRAMES		;DUMMY START, NO SOUND
	STA X,COUNT1		;TILL MODSND STORES TO POKEY
	LDA I,-1
	STA SINDEX
	THEN
	DEY
	DEX
	MIEND
	LDX TEMPA		;RESTORE X & Y UPON RETURN
	LDY TEMPA+1
	RTS
	.PAGE
	.SBTTL SOUND ROUTINE
;
;CONTINUES A PREVIOUSLY STARTED SOUND
;WHEN CHANNEL 1 GOES IDLE, ALL SOUND ENDS
;
MODSND:
	LDX I,NCHANL-1			;8 CHANNELS
	BEGIN
	LDA X,POINT
	IFNE			;1 SET OF FRAMES EXPIRED?
	CPX SINDEX
	IFNE
	DEC X,FRAMES		;YES
	IFEQ			;SUBCHANNEL ACTIVE?
	DEC X,COUNT1		;YES.
	IFEQ			;MOVE TO NEXT CHANGE GROUP?
RESOUN:	INC X,POINT		;YES. START VALUE
	INC X,POINT
	LDA X,POINT
	ASL
	TAY
	IFCC
	LDA Y,SOUND+STVAL
	STA X,CURRENT
	LDA Y,SOUND+NUMBER
	STA X,COUNT1
	LDA Y,SOUND+FRCNT
	ELSE
	LDA Y,SOUND+STVAL+100
	STA X,CURRENT
	LDA Y,SOUND+NUMBER+100
	STA X,COUNT1
	LDA Y,SOUND+FRCNT+100
	ENDIF
	STA X,FRAMES
	IFEQ			;CHANNEL STILL ALIVE?
	STA X,POINT		;NO. KILL IT
	LDA X,CURRENT
	IFNE			;RESTART CHANNEL?
	STA X,POINT		;YES. UPDATE PTR. WITH RESTART LOC
	BNE RESOUN
	ENDIF
	ENDIF			;
	ELSE			;NO. MAKE CHANGE IN OLD GROUP
	ASL
	TAY
	IFCC
	LDA Y,SOUND+FRCNT
	STA X,FRAMES
	LDA Y,SOUND+CHANGE
	ELSE
	LDA Y,SOUND+FRCNT+100
	STA X,FRAMES
	LDA Y,SOUND+CHANGE+100
	ENDIF
	LDY X,CURRENT
	CLC
	ADC X,CURRENT
	STA X,CURRENT
	TXA
	LSR
	IFCS
	TYA
	EOR X,CURRENT
	AND I,0F0
	EOR X,CURRENT
	STA X,CURRENT
	ENDIF
	ENDIF
	LDA X,CURRENT		;UPDATE POKEY AUDIO CHANNEL
	CPX I,8
	IFCS
	STA X,AUD2F1-8
	ELSE
	STA X,AUDF1
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	DEX
	MIEND
	RTS
	.PAGE
INISOU:	LDA I,0
	STA A,AUDF1+0F
	STA AUD2F1+0F
	LDA I,7
	STA A,AUDF1+0F
	STA AUD2F1+0F
	LDX I,0F
	LDA I,0
	BEGIN
	STA AX,AUDF1
	STA X,AUD2F1
	STA X,POINT
	STA X,CURRENT
	DEX
	MIEND
	LDA I,AUDCV
	STA AUDCTL
	LDX #0			;DEFAULT VALUE FOR AUDCV2
	STX AUD2CT
	RTS
	HLL65
	.PAGE
	.SBTTL	HUM SOUND CONTROL
;
; HUM SOUND
;
	.END
                                                                                                           