	.TITLE	LOONYM
	.RADIX	16
	; COPYRIGHT 1982 ATARI. UNAUTHORIZEDREPRODUCTION,
	; ADAPTATION,DISTRIBUTION,PERFORMANCEOR DISPLAY OF
	; THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL
	; WORK IS STRICTLY PROHIBITED!!!!!!!
	.SBTTL	*********************************
	.SBTTL	*MODULE:LUNAR BATTLE MAIN	*
	.SBTTL	*				*
	.SBTTL	*PROGRAMMER:RICHARD ADAM	*
	.SBTTL	*				*
	.SBTTL	*FUNCTION:LOONY STATE HANDLER	*
	.SBTTL	*				*
	.SBTTL	*********************************

	.INCLUDE	LOONYC	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.NLIST
	.INCLUDE	HLL65F	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	.ENABL AMA
	.LIST
	.MACRO LXL ARG
	.BYTE 0A2
	.WORD ARG
	.=.-1
	.ENDM

	.MACRO LAH ARG
	.BYTE 0A9
	.ENABL M68
	.WORD ARG
	.DSABL M68
	.=.-1
	.ENDM
	.ASECT
	.=PROG

	.PAGE
	.SBTTL	MAINLINE

;INPUTS:GAMEBOARD INITIALIZED BY POWERON
;OUTPUTS:NONE

MAINLN:	LDA I,CATRCT		;SET ATTRACT MODE
	STA STATE
	STA STATE+1
	LDA I,CDATRC
	STA DSTATE
	STA DSTATE+1
	LDA I,0
	STA ATRAFL
	STA FRAME
	JSR ININAM
	JSR INHISC		;INITIALIZE HI SCORES
	JSR INISOU		;INITIALIZE SOUNDS
	JSR TRBFSC		;MOVE FROM EA BUFR TO TABLE
	BEGIN
	LDA I,0
	STA MSGBIT
	JSR EXSTAT		;DO GAME STATE
	JSR ALWAYS
	JSR DISPLAY
	LDA IN0
	AND I,MSTEST
	EQEND
	JMP STMAIN
CKSUM5: .BYTE 0A9 
	.PAGE
	.SBTTL	EXECUTE APPROPRIATE GAME STATE

;INPUTS:STATE:CODE FOR STATE TO BE EXECUTED
;OUTPUTS:GAME EXECUTES APPROPRIATE GAME STATE
;	 THRU STALST

EXSTAT:	LDX PLAYUP
	LDA X,STATE
	TAX
	LDA MKMDFL
	IFMI
	LDA X,MRKLST+1
	PHA
	LDA X,MRKLST
	PHA
	ELSE
	LDA AX,STALST+1
	PHA
	LDA AX,STALST
	PHA
	THEN
	RTS

;STATE ADDRESS LIST

STALST:	.WORD START1-1
	.WORD START2-1
	.WORD NEWGAM-1
	.WORD NWVYGE-1
	.WORD PLAY-1
	.WORD DIED-1
	.WORD DIED2-1
	.WORD ENDVYG-1
	.WORD ENDGAM-1
	.WORD PAUSE-1
	.WORD EXPAND-1
	.WORD ATRACT-1
	.WORD DEPSPA-1
	.WORD EXPAN2-1
	.WORD DSBATL-1
	.WORD GETINI-1
	.WORD ATRSEU-1
	.WORD ATRML1-1
	.WORD ATRML2-1
ELIST:
MRKLST:	.WORD START1-1
	.WORD START2-1
	.WORD NEWGAM-1
	.WORD NWVYGE-1
	.WORD MKPLAY-1
	.WORD DIED-1
	.WORD DIED2-1
	.WORD ENDVYG-1
	.WORD ENDGAM-1
	.WORD PAUSE-1
	.WORD EXPAND-1
	.WORD ATRACT-1
	.WORD MKDPSP-1
	.WORD EXPAN2-1
	.WORD MKDSBT-1
EMLIST:
	.PAGE
	.SBTTL	NON-STATE DEPENDENT PROCESSING

;INPUTS:NONE
;OUTPUTS:START SWITCHES CHECKED
;	 FREEPLAY CHECKED
;	 CREDITS UPDATED
;	 STATE UPDATED

ALWAYS:	LDX PLAYUP 
	INC FRAME
	LDA ATRAFL
	IFEQ
	LDA OPTSW2
	AND I,3
	IFEQ
	LDA I,2
	STA $$CRDT
	THEN
	LDY I,0FF
	LDA $$CRDT
	IFNE
	CMP I,2
	LDA SWITCH
	IFCS
	AND I,MSTRT2
	IFNE
	LDY I,CSTRT2
	JMP OUT4
	THEN
	THEN
	LDA SWITCH
	AND I,MSTRT1
	IFNE
	LDY I,CSTRT1
	THEN
	THEN
OUT4:	TYA
	IFPL
	STA X,STATE
	BIT $USE
	IFPL
	LDA I,-1
	STA $USE
	LDA I,4
	STA NCTIME
	THEN
	THEN
	ELSE
	BIT $USE
	IFPL
	DEC $USE
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL MARKETING MODE

MKMODE: LDA I,-1
	STA MKMDFL
	LDA I,1
	STA VECRAM
	LDA I,0E2
	STA VECRAM+1
	LDA I,20
	STA VECRAM+3
	STA VECRAM+403
	LDA I,CSTRT1
	STA STATE
	LDA I,CDSETU
	STA DSTATE
	JSR INISOU
	BEGIN
	INC FRAME
	LDA LIVES
	CMP I,1
	IFCC
	LDA I,1
	STA LIVES
	THEN
	LDA I,0
	STA MSGBIT
	JSR EXSTAT
	JSR DISPLAY
	LDA IN0
	AND I,MSTEST
	NEEND
	JMP POWERON



MKPLAY: JSR UPSHOP
	JSR UPLAPS
	JSR SHVSGR
	LDA PLADED
	IFNE
	JSR UPDVEL
	JSR ADGRAV
	JSR ADDRAG
	JSR UPDROT
	JSR PLFIRE
	JSR COLDCT
	JSR TRACTR
	JSR CDREAC
	
	JSR UPAPTM
	THEN
	JSR BAFIRE
	JSR CTLZUM
	JSR ZOOM
	JSR PATVEL
	JSR PATMOV
	JSR CKDONE
	JSR PSVSEB
	JSR CDPVSP
	JSR UPASTM
	JSR UPEXPO
	JSR CKENDW
	JSR INMSG1
	JSR UPATSP
	LDA I,CDPLAY
	STA DSTATE
	RTS


MKDPSP: LDA I,1
	STA BSCALE
	LDA PLADED
	IFNE
	JSR UPLAPS
	JSR UPDVEL
	JSR PTGRAV
	JSR UPDROT
	JSR PLFIRE
	JSR SBTEST
	JSR CDEVSP
	JSR PLANCK
	THEN
	JSR SEASVE
	JSR UPASPS
	JSR ASSCTL
	JSR UPASTM
	JSR UPAPTM
	JSR UPSHOP
	JSR UPEXPO
	JSR CKENDW
	JSR UPASPD
	LDA I,CDDPSP
	STA DSTATE
	RTS



MKDSBT: LDA I,1
	STA BSCALE
	LDA I,60
	STA LSCALE
	LDA PLADED
	IFNE
	JSR UPDVEL
	JSR ADDRAG
	JSR UPDROT
	JSR UPLAPS
	JSR PLFIRE
	THEN
	LDX ASHPID
	JSR ASHMOV
	JSR SETVEL
	JSR ONESHT
	JSR CDASHP
	JSR UPSHOP
	JSR DSBEND
	JSR UPEXPO
	JSR CKENDW
	JSR UPASPD
	LDA I,CDDPSP
	STA DSTATE
	RTS
	.PAGE
	.SBTTL DEEP SPACE
DEPSPA: LDA I,1
	STA BSCALE
	LDX PLAYUP
	LDA X,PLADED
	IFNE
	JSR UPLAPS ; UP SHIP POS.
	JSR UPDVEL	; UP VELOCITY
	JSR PTGRAV
	JSR UPDROT	; ROTATE SHIP
	JSR PLFIRE	; PLAYER FIRE
	JSR SBTEST
	JSR CDPVSE	; SHIP VS. SHOT COLLISION THIS IS A TEST
	JSR UPDFUL	; UP FUEL COUNT
	JSR PLANCK	; CHECK IN PLANETS RANGE
	THEN
	JSR CDEVSP
	JSR SEASVE
	JSR UPASPS
	JSR ASSCTL
	JSR UPASTM
	JSR UPAPTM
	JSR UPSHOP
	JSR UPEXPO
	JSR CKENDW
	JSR UPASPD
	LDA OPTSW1
	AND I,0C0
	CMP I,0C0
	IFNE
	LDA I,MNXBON
	ORA MSGBT4
	STA MSGBT4
	THEN
	LDX PLAYUP
	LDA I,CDDPSP
	STA X,DSTATE
	RTS

DSBATL: LDA I,1
	STA BSCALE
	LDA I,60
	STA LSCALE
	LDX PLAYUP
	LDA X,PLADED
	IFNE
	JSR UPDVEL
	JSR ADDRAG
	JSR UPDROT
	JSR UPLAPS
	JSR PLFIRE
	THEN
	LDX ASHPID
	JSR ASHMOV
	JSR SETVEL
	JSR ONESHT
	JSR CDASHP
	JSR SHTOSH
	JSR UPSHOP
	JSR CDPVSE
	JSR UPDFUL
	JSR DSBEND
	JSR UPEXPO
	JSR CKENDW
	JSR UPASPD
	LDA OPTSW1
	AND I,0C0
	CMP I,0C0
	IFNE
	LDA I,MNXBON
	ORA MSGBT4
	STA MSGBT4
	THEN
	LDX PLAYUP
	LDA I,CDDPSP
	STA X,DSTATE
	RTS

	.PAGE
ENDGAM:	JSR HISCHK	
	JSR UPBOOK
	JSR WRBOOK
	LDA I,0
	STA ATRAFL
	STA NCTIME
	STA $USE
	RTS
PAUSE: LDA PAUSTM
	IFMI
	LDY I,0FF
	STY LSCALE
	LDX PLAYUP
	LDY LASPLA
	LDA Y,NXSTAT
	STA X,STATE
	JSR SWAP
	THEN
	RTS


UPBOOK: LDA ATRAFL
	SED
	LDX I,2
	BEGIN
	LDA X,SCORE2-1
	CLC
	ADC TOTSCR
	STA TOTSCR
	LDA X,SCORE3-1
	ADC TOTSCR+1
	STA TOTSCR+1
	LDA TOTSCR+2
	ADC I,0
	STA TOTSCR+2
	DEX
	EQEND
	CLD
	LDA GTIMER
	CLC
	ADC TOTIME
	STA TOTIME
	LDA GTIMER+1
	ADC TOTIME+1
	STA TOTIME+1
	LDA TOTIME+2
	ADC I,0
	STA TOTIME+2
	RTS

	.PAGE
	.SBTTL	EXPAND VIEW

EXPAN2: LDA LSCALE
	PHA
	CMP I,0FF
	IFEQ
	JSR SOSYSN
	THEN
	PLA
	CMP I,80
	IFCS 
	JSR UPEXPO
	DEC LSCALE
	LDA I,0
	STA MSGBT4
	LDX PLAYUP
	LDA X,FIRPLA
	CMP I,1
	IFEQ
	LDA I,MSUPBO
	ORA MSGBT4
	STA MSGBT4
	THEN
	ELSE
	LDX PLAYUP
	LDA X,SSFLAG
	AND I,1
	IFEQ
	JSR STRGRV
	ELSE
	JSR STRGR2
	THEN
	LDA I,7
	STA PMXVEL
	LDA I,-7
	STA NMXVEL
	LDA I,1
	STA THRSTV
	STA THRSTH
	LDA I,CDPSPA
	STA X,STATE
	LDA X,FIRPLA
	CMP I,1
	IFEQ
	LDA I,MSUPBO?0FF
	AND MSGBT4
	STA MSGBT4
	INC X,FIRPLA
	THEN
	THEN
	LDX PLAYUP
	LDA I,CDEXP2
	STA X,DSTATE
	RTS
CLRVEL: LDA I,0
	LDX I,5
	BEGIN
	STA X,LAVEHH
	DEX
	MIEND
	RTS


EXPAND:	LDA LSCALE
	LDY I,1
	BEGIN
	LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA LSCALE
	CMP X,PLSCAL
	IFCS
	DEC LSCALE
	ELSE
	LDA ATRAFL
	IFEQ
	LDA I,CATRM2
	ELSE
	LDA I,CPLAY
	THEN
	LDX PLAYUP
	STA X,STATE
	THEN
	DEY
	MIEND
	LDA I,MDANGR!MATARI?0FF
	AND MSGBT3
	STA MSGBT3
	LDA I,MNXBON?0FF
	AND MSGBT4
	STA MSGBT4
	LDX PLAYUP
	LDA I,CDEXPN
	STA X,DSTATE
	RTS
PLSCAL: .BYTE 81,81,81,64,60,81,81,81
	.BYTE 50,60,81,81,70,81,60

PBSCAL:	.BYTE 2,2,2,3,3,2,2,2
	.BYTE 3,3,2,2,3,2,3
	.PAGE
	.SBTTL	EXECUTE PLAY STATE

;INPUTS:NONE
;OUTPUTS:

PLAY:	JSR UPSHOP
	JSR UPLAPS		;UPDATE LANDER POSITION
	JSR SHVSGR
	LDX PLAYUP
	LDA X,PLADED
	IFNE
	JSR UPDVEL		;UPDATE LANDER VELOCITY
	JSR ADGRAV
	JSR ADDRAG
	JSR UPDROT
	JSR PLFIRE
	JSR COLDCT
	JSR TRACTR
	JSR CDPVSE
	JSR CDREAC
	JSR SHTOPA
	JSR UPAPTM
	THEN
	JSR BAFIRE
	JSR CTLZUM
	JSR ZOOM
	JSR PATVEL
	JSR PATMOV
	JSR CKDONE
	JSR PSVSEB
	JSR CDPVSP
	JSR UPASTM
	JSR UPDFUL
	JSR UPEXPO
	JSR CKENDW
	JSR INMSG1
	JSR UPATSP
	LDX PLAYUP
	LDA I,CDPLAY
	STA X,DSTATE
	RTS
	.PAGE
	.SBTTL	SET-UP ATTRACT
ATRSEU:	LDA I,38
	STA LACPVL
	LDX I,-1
	STX LACPVH
	INX
	STX ASDETM+2
	STA ASDETM+3
	STX LACPHL
	STX LACPHH
	STX QUADRANT
	STX TRSTAT
	STX SIRNXR
	STX SPRKLE
	STX ATRCTL
	STX CNTLIX
	STX MSGBT4
	LDA I,0A0
	STA NFRAME
	LDA I,4
	STA SWCNT
	STA LANGLE
	STA THSTAT
	STX PLNACT
	STX PLAYUP
	STX SSFLAG
	STX APDEAD
	STA THRSTV
	STA THRSTH
	LDA I,6
	STA PMXVEL
	LDA I,-6
	STA NMXVEL
	LDA I,2
	STA WAVENO
	STA ASHSPD
	JSR ININM2
	JSR ASINIT
	JSR CLRVEL
	JSR CLRSHT
	JSR SETXR
	LDA I,80
	STA LSCALE
	LDA I,1
	STA BSCALE
	LDA GRAFCT
	STA GRAVTY
	LDA I,CATRM1
	STA STATE
	LDA I,CDATR1
	STA X,DSTATE
	RTS
	.PAGE
	.SBTTL	SPACE ATRACT
ATRML1:	JSR ATLAPS
	JSR ATHRST
	JSR UPSHOP
	JSR ADGRAV
	JSR ATPLCK
	JSR SEASVE
	JSR ASSCTL
	JSR UPASPS
	JSR UPASTM
	JSR SETSTA
	LDA I,MDANGR!MATARI
	JSR CRDMES
	STA MSGBT3
	LDA I,MLINK
	ORA MSGBIT
	STA MSGBIT
	LDA I,CDATR1
	STA DSTATE
	RTS
ATRSHP: DEC NFRAME
	IFEQ
	LDY CNTLIX 
	INY
	LDA Y,COMAND-1
	STA ATRCTL
	LDA Y,FRACNT-1
	STA NFRAME
	STY CNTLIX
	THEN
	RTS

COMAND: .BYTE 8,1,4,0,2,8,1,0
FRACNT: .BYTE 4,2,20,20,36,0E,1,0FF
	.PAGE
	.SBTTL	PLANET ATTRACT
ATRML2:	JSR UPSHOP
	LDA PLADED
	IFNE
	JSR ATRSHP
	JSR ATLAPS
	JSR SHVSGR
	JSR ATUVEL
	JSR ADGRAV
	JSR ADDRAG
	JSR ATUROT
	JSR SETQUA
	JSR COLDCT
	JSR ATPLFR
	JSR ATRCTR
	JSR CDPVSE
	JSR BAFIRE
	JSR CTLZUM
	JSR ZOOM
	JSR UPASTM
	JSR PATVEL
	JSR PATMOV
	JSR CKDONE
	JSR PSVSEB
	THEN
	JSR UPEXPO
	JSR CKENDW
	LDA I,MLINK?0FF
	AND MSGBIT
	STA MSGBIT
	LDA I,MSHBNK!MTRFUL
	JSR CRDMES
	STA MSGBT3
	JSR INMSG1
	JSR SETSTA
	LDA I,CDATR2
	STA DSTATE
	RTS

CRDMES: LDX $$CRDT
	IFNE
	ORA I,MCREDS
	ELSE
	AND I,MCREDS?0FF
	THEN
	RTS
ATUROT:
	LDA ATRCTL
	AND I,4
	IFNE
	DEC LANGLE
	THEN
	LDA ATRCTL
	AND I,8
	IFNE
	INC LANGLE
	THEN
	RTS
SETSTA:	LDA STATE
	TAY
	CMP I,CPLAY
	IFEQ
	LDY I,CATRM2
	THEN
	CMP I,CDIED
	IFEQ
	LDY I,CATRCT
	THEN
	STY STATE
	LDA I,0FF
	STA POINT8
	RTS
	.PAGE
	.SBTTL	UPDATE VELOCITY

;INPUTS:GRAVYH,GRAVYL=GRAVITY
;	LAVEV,LAVEH=LANDER VELOCITIES
;OUTPUTS:

UPDVEL:
	LDA I,0
	STA THSTAT
	LDA SWITCH
	AND I,MTHRST
	IFEQ
	RTS
	THEN
	CLC
	SED
	LDA FUESED
	ADC I,6
	STA FUESED
	CLD
	STA THSTAT
	JSR THRUSN
ATHRST:	LDA LANGLE
	AND I,0F		;STRIP QUADRANT BITS
	TAY
	LDA QUADRANT		;DETERMINE QUADRANT
	LSR
	LSR
	IFCC
	LDA AY,COSTBL		;USE COS FOR QUADS 1,3
	ELSE
	LDA AY,SINTBL		;SIN FOR QUADS 0,2
	THEN
	STA MUPCAN
	LDA THRSTV		;IMES THRUST FOR V COMPONENT
	STA MUPYER
	JSR MULTIPLY
	LDY QUADRANT
	LSR RESH
	ROR RESL
	LSR RESH
	ROR RESL
	LSR RESH
	ROR RESL
	LDA RESL
	EOR AY,VSIGN		;FLIP SIGN ACCORDING TO QUADRANT
	STA RESL
	LDA RESH
	EOR AY,VSIGN
	STA RESH
	LDA LAVEVF
	CLC
	ADC RESL
	STA LAVEVF
	LDA LAVEVL
	ADC RESH
	STA LAVEVL
	IFMI			;SET SIGN OF VELOCITY
	LDA I,-1
	ELSE
	LDA I,0
	THEN
	STA LAVEVH
	TYA
	LSR
	LSR
	LDA LANGLE		;SAME METHOD FOR H COMPONENT
	AND I,0F
	TAY
	IFCC
	LDA AY,SINTBL
	ELSE
	LDA AY,COSTBL
	THEN
	STA MUPCAN
	LDA THRSTH
	STA MUPYER
	JSR MULTIPLY
	LDY QUADRANT
	LSR RESH
	ROR RESL
	LSR RESH
	ROR RESL
	LSR RESH
	ROR RESL
	LDA RESL
	EOR AY,HSIGN
	STA RESL
	LDA RESH
	EOR AY,HSIGN
	STA RESH
	LDA LAVEHF
	CLC
	ADC RESL
	STA LAVEHF
	LDA LAVEHL
	ADC RESH
	STA LAVEHL
	IFMI
	LDA I,-1
	ELSE
	LDA I,0
	THEN
	STA LAVEHH
	JMP MAXCHK
VSIGN:	.WORD 0,-1,-1,0
HSIGN:	.WORD 0,0,-1,-1
ATUVEL: LDA I,0
	STA THSTAT
	LDA ATRCTL
	AND I,2
	IFNE
	STA THSTAT
	JMP ATHRST
	THEN
	RTS
	.PAGE
UPDFUL:	LDX PLAYUP
	LDA X,FUEL1
	ORA X,FUEL2
	ORA X,FUEL3
	IFNE
	LDA FUESED
	IFNE
	SED
	LDA X,FUEL1
	SEC
	SBC FUESED
	STA X,FUEL1
	IFCC
	LDA X,FUEL2
	SBC I,0
	STA X,FUEL2
	PHP
	CMP I,21
	IFCC
	LDA X,FUEL3
	IFEQ
	JSR FU0SN
	THEN
	THEN
	PLP
	THEN
	IFCC
	LDA X,FUEL3
	SBC I,0
	STA X,FUEL3
	IFCC
	LDA I,0
	STA X,FUEL1
	STA X,FUEL2
	STA X,FUEL3
	THEN
	THEN
	CLD
	THEN
	ELSE
	LDA I,-1
	STA LSCALE
	STA X,LIVES
	LDA I,CDIED
	STA X,STATE
	THEN
	LDA I,0
	STA FUESED
	RTS
	.PAGE
	.SBTTL	KEEP VELOCITIES WITHIN LIMITS

;INPUTS:LAVEV,LAVEH=SHIP VELOCITIES
;
;
;OUTPUTS:

MAXCHK:	LDY I,0
	LDX PMXVEL
	LDA LAVEVL
	IFMI			;MINUS VEL CHECK MINUS LIMIT
	CMP NMXVEL
	IFCC
	LDA NMXVEL		;SET AT LIMIT
	STA LAVEVL
	STY LAVEVF
	THEN
	ELSE
	CMP PMXVEL
	IFCS
	STY LAVEVF
	STX LAVEVL
	THEN
	THEN
	LDA LAVEHL		;SAME PROCEDURE FOR H VEL
	IFMI
	CMP NMXVEL
	IFCC
	LDA NMXVEL
	STA LAVEHL
	STY LAVEHF
	THEN
	ELSE
	CMP PMXVEL
	IFCS
	STX LAVEHL
	STY LAVEHF
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL	UPDATE ROTATION

;INPUTS:SWITCHS:STATE OF SWITCHES
;	LANGLE:CURRENT LANDER ANGLE
;	QUADRANT:CURRENT LANDER QUADRANT
;OUTPUTS:LANGLE,QUADRANT UPDATED
;	   A DESTROYED

UPDROT:
	LDX PLAYUP
	LDA X,FUEL1
	ORA X,FUEL2
	ORA X,FUEL3
	IFNE
	LDA SWITCH
	AND I,MROTRT
	IFNE
	INC SWCNT
	LDA SWCNT		;YES CHANGE ANGLE
	AND I,3F
	STA LANGLE
	THEN
	LDA SWITCH
	AND I,MROTLF
	IFNE
	DEC SWCNT
	LDA SWCNT
	AND I,3F
	STA LANGLE
	THEN
SETQUA:	LDA LANGLE		;SET QUADRANT
	LSR
	LSR			;D1 & D2 DEFINE QUADRANT
	LSR
	AND I,6
	STA QUADRANT
	THEN
	RTS
	.SBTTL	SIN AND QUADRANT TABLES

SINTBL:	.BYTE 0,19,32,4A,62,79,8E,0A2
	.BYTE 0B5,0C6,0D5,0E2,0ED,0F5,0FB,0FF
COSTBL:	.BYTE 0FF,0FB,0F5,0ED,0E2,0D5,0C6,0B5
	.BYTE 0A2,8E,79,62,4A,32,19,0
	.PAGE
	.SBTTL	ADD IN GRAVITY

ADGRAV: LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,10
	BNE PTGRAV
	LDA X,PLANID
	AND I,20
	BNE SKIP2
	LDX PLAYUP
	LDA X,SSFLAG
	AND I,4
	BNE NEGRAV
	LDA LAVEVF
	SEC
	SBC GRAVTY
	STA LAVEVF
	LDA LAVEVL
	SBC I,0
	STA LAVEVL
	LDA LAVEVH
	SBC I,0
	STA LAVEVH
SKIP2:	RTS
NEGRAV:	LDA LAVEVF
	CLC
	ADC GRAVTY
	STA LAVEVF
	LDA LAVEVL
	ADC I,0
	STA LAVEVL
	LDA LAVEVH
	ADC I,0
	STA LAVEVH
	RTS
	.PAGE
	.SBTTL GRAVITY ABOUT A POINT



PTGRAV: LDA LACPVL
	SEC
	SBC CNTRVL
	STA POINT1
	LDA LACPVH
	SBC CNTRVH
	STA DIFF1
	STA POINT2
	LDA LACPHL
	SEC
	SBC CNTRHL
	STA POINT3
	LDA LACPHH
	SBC CNTRHH
	STA POINT4
	STA DIFF2
	JSR COMPNT
	LDY PLAYUP
	LDA Y,STATE
	CMP I,CPLAY
	IFEQ
	LDA Y,SSFLAG
	AND I,4
	IFNE
	LDA DIFF1
	EOR I,80
	STA DIFF1
	THEN
	THEN
	LDA LAVEVF
	LDX DIFF1
	IFPL
	SEC
	SBC POINT1
	STA LAVEVF
	LDA LAVEVL
	SBC I,0
	STA LAVEVL
	LDA LAVEVH
	SBC I,0
	STA LAVEVH
	ELSE
	CLC
	ADC POINT1
	STA LAVEVF
	LDA LAVEVL
	ADC I,0
	STA LAVEVL
	LDA LAVEVH
	ADC I,0
	STA LAVEVH
	THEN
	LDA Y,STATE
	CMP I,CPLAY
	IFEQ
	LDA Y,SSFLAG
	AND I,4
	IFNE
	LDA DIFF2
	EOR I,80
	STA DIFF2
	THEN
	THEN
	LDA LAVEHF
	LDX DIFF2
	IFPL
	SEC
	SBC POINT3
	STA LAVEHF
	LDA LAVEHL
	SBC I,0
	STA LAVEHL
	LDA LAVEHH
	SBC I,0
	STA LAVEHH
	ELSE
	CLC
	ADC POINT3
	STA LAVEHF
	LDA LAVEHL
	ADC I,0
	STA LAVEHL
	LDA LAVEHH
	ADC I,0
	STA LAVEHH
	THEN
	RTS

COMPNT:	LDX I,2
	LDY I,0
	BEGIN
	LDA X,POINT2
	IFMI
	TYA
	SEC
	SBC X,POINT1
	STA X,POINT1
	TYA
	SBC X,POINT2
	STA X,POINT2
	THEN
	DEX
	DEX
	MIEND
	LDX I,2
	BEGIN
	LDY I,3
	BEGIN
	LSR X,POINT2
	ROR X,POINT1
	DEY
	MIEND
	LSR X,POINT1
	LSR X,POINT1
	LDA X,POINT1
	LSR
	CLC
	ADC X,POINT1
	ORA I,3
	STA X,POINT1
	DEX
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	PUT DRAG ON SHIP

;INPUTS:DRGCNT:TIMER FOR ADDING INDRAG
;	LAVEXX:LANDER VELOCITIES
;	STICKY:DRAG CONSTANT
;
;
;OUTPUTS:DRGCNT UPDATED
;	LAVEXX UPDATED
;	A,X UPDATED
ADDRAG:
	LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,20
	IFEQ
	LDX I,3
	LDY WAVENO
	BEGIN
	LDA X,LAVEHF
	IFNE
	LDA X,LAVEHH
	IFPL
	LDA X,LAVEHF
	SEC
	SBC Y,STICKY
	STA X,LAVEHF
	LDA X,LAVEHL
	SBC I,0
	STA X,LAVEHL
	LDA X,LAVEHH
	SBC I,0
	STA X,LAVEHH
	ELSE
	LDA X,LAVEHF
	CLC
	ADC Y,STICKY
	STA X,LAVEHF
	LDA X,LAVEHL
	ADC I,0
	STA X,LAVEHL
	LDA X,LAVEHH
	ADC I,0
	STA X,LAVEHH
	THEN
	THEN
	DEX
	DEX
	DEX
	MIEND
	THEN
	RTS
STICKY: .BYTE 3,3,3,3,2,2,2,2,2,2
	.PAGE
	.SBTTL	UPDATE LANDER POSITION

;INPUTS:LACPV,LACPH,SHIP CORRDINATES
;	LAVEV,LAVEH SHIP VELOCITY
;
;
;OUTPUTS:POSITION ARRAY UPDATED
;	 ACC DESTROYED

UPLAPS: LDX PLAYUP
	LDA X,PLADED
	IFEQ
	RTS
	THEN
	LDA SWITCH
	AND I,MTRCTR
	IFNE
	SED
	LDA I,20
	CLC
	ADC FUESED
	STA FUESED
	CLD
	THEN
ATLAPS:	LDA LACPVF
	CLC
	ADC LAVEVF
	STA LACPVF
	LDA LACPVL
	ADC LAVEVL
	STA LACPVL
	LDA LACPVH
	ADC LAVEVH
	IFPL
	CMP I,5			;AT V LIMIT?
	IFCS
	LDY I,0			;YES SET COORDS AT MAX
	STY LACPVL
	LDA I,5
	THEN
	THEN
	STA LACPVH
	LDX PLAYUP
	LDA X,STATE
	CMP I,CATRM2
	BEQ EXCEPT
	CMP I,CPLAY
	IFEQ
EXCEPT:	JSR UPLSCTR		;UPDATE SECTOR INFORMATION
	JSR LIMTCK		;CHECK H LIMITS
	ELSE
	CMP I,CDSBTL
	IFEQ
	LDA I,-2
	STA TEMP1
	LDA I,2
	STA TEMP2
	LDA I,2
	STA TEMP3
	LDA I,-2
	STA TEMP4
	ELSE
	LDA I,0FD
	STA TEMP1
	LDA I,2
	STA TEMP2
	LDA I,3
	STA TEMP3
	LDA I,0FD
	STA TEMP4
	THEN
	JSR LIMEGE
	THEN
	LDA LACPHF
	CLC
	ADC LAVEHF
	STA LACPHF
	LDA LACPHL
	ADC LAVEHL
	STA LACPHL
	LDA LACPHH
	ADC LAVEHH
	STA LACPHH
	LDA EGEFLG
	IFNE
	JSR NEGVEL
	THEN
OUT:	RTS
NEGVEL:	BIT EGEFLG
	IFMI
	LDA I,0
	SEC
	SBC LAVEHF
	STA LAVEHF
	LDA I,0
	SBC LAVEHL
	STA LAVEHL
	LDA I,0
	SBC LAVEHH
	STA LAVEHH
	ELSE
	LDA I,0
	SEC
	SBC LAVEVF
	STA LAVEVF
	LDA I,0
	SBC LAVEVL
	STA LAVEVL
	LDA I,0
	SBC LAVEVH
	STA LAVEVH
	THEN
	RTS
	.PAGE
	.SBTTL	CHECK SCROLL LIMITS

; FUNCTION:	DECIDE WHETHER TO MOVE SHIP
;		OR TERRAIN

LIMTCK: LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,0F0
	IFNE
	LDA X,NVLIMT
	STA TEMP1
	LDA X,PVLIMT
	STA TEMP2
	LDA X,PHLIMT
	STA TEMP3
	LDA X,NHLIMT
	STA TEMP4
	JMP LIMEGE
	THEN
	LDA LAVEHH
	AND LACPHH
	LDX LSCALE
	CPX I,50
	IFCC
	CMP I,0FF
	ELSE
	CMP I,0FD
	THEN
	IFCC
	CMP I,10
	IFCS
	JSR SCRADJ
	JSR UPDSCTR		;GET HERE IF TRAVELLING LEFT
	PLA			;AND AT LEFT LIMIT
	PLA			;SO GO SCROLL TERRAIN INSTEAD
	JMP OUT
	THEN
	THEN
	LDA LAVEHH
	IFPL
	LDA LACPHH
	LDX LSCALE
	CPX I,50
	IFCC
	CMP I,1
	ELSE
	CMP I,2
	THEN
	IFCS
	IFNE
	CMP I,10
	IFCC
	JSR SCRADJ
	JSR UPDSCTR		;AT RIGHT LIMIT AND
	PLA			;TRAVELLING TO THE RIGHT
	PLA
	JMP OUT
	THEN
	THEN
	THEN
	THEN
	RTS
NVLIMT:	.BYTE 0,0,0,0FA,0F8,0,0,0,
	.BYTE 0,0F8,0,0,-6,0,-8
PVLIMT:	.BYTE 0,0,0,6,3,0,0,0
	.BYTE 4,3,0,0,6,0,8
PHLIMT:	.BYTE 0,0,0,6,8,0,0,0
	.BYTE 8,8,0,0,8,0,8
NHLIMT:	.BYTE 0,0,0,0FA,0F8,0,0,0
	.BYTE 0,-8,0,0,-8,0,-8
	.PAGE
	.SBTTL STOP SHIP AT SCREEN EDGE - DEEP SPACE

LIMEGE: LDA I,0
	STA EGEFLG
	LDA LACPHH
	IFMI
	CMP TEMP4
	IFCC
	LDA I,80
	STA EGEFLG
	LDA I,8
	STA LACPHL
	INC LACPHH
	THEN
	ELSE
	CMP TEMP3
	IFCS
	LDA I,80
	STA EGEFLG
	LDA I,0F7
	STA LACPHL
	DEC LACPHH
	THEN
	THEN
	LDA LACPVH
	IFMI
	CMP TEMP1
	IFCC
	LDA I,40
	STA EGEFLG
	LDA I,0FF
	STA LACPVL
	THEN
	ELSE
	CMP TEMP2
	IFCS
	LDA I,40
	STA EGEFLG
	LDA I,0
	STA LACPVL
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL	UPDATE LANDSCAPE SECTOR INFO

;INPUTS:	OVRSCN = AMMOUNT OF SCAN PAST LEFT
;		HDIR = AMMOUNT TO BUMP OVERSCAN
;		SECTOR = RESIDENT SECTOR OF LANDER
;		LFTSCT = LEFTMOST SECTOR #
;OUTPUTS:	OVRSCN,SECTOR,LFTSCT,A UPDATED

UPLSCTR:	LDA EGEFLG
	IFEQ
	CLC
	LDA SCTCTF
	ADC LAVEHF
	STA SCTCTF
	LDA SCTCNT
	ADC LAVEHL
	STA SCTCNT
	BIT LAVEHH
	IFPL
	IFCS
	INC SECTOR
	THEN
	ELSE
	IFCC
	DEC SECTOR
	THEN
	THEN
	LDA SECTOR
	AND I,0F
	STA SECTOR
	THEN
	RTS
UPDSCTR:	LDA OVRSCF
	CLC
	ADC LAVEHF
	STA OVRSCF
	LDA OVRSCN
	ADC LAVEHL
	STA OVRSCN
	BIT LAVEHH
	IFPL
	IFCS
	INC LFTSCT
	THEN
	ELSE
	IFCC
	DEC LFTSCT
	THEN
	THEN
	LDA LFTSCT
	AND I,0F
	STA LFTSCT
	RTS
.PAGE
.SBTTL ADJUST SHOT AND BASE COORDS DURING SCROLLING



SCRADJ:	LDX I,ASHOTS+PSHOTS+NBASES+1
	BEGIN
	LDA X, BACPHF	;ADD IN H VELOCITY TO POSITIONS
	SEC
	SBC 	LAVEHF
	STA	X,BACPHF
	LDA	X,BACPHL
	SBC	LAVEHL
	STA	X,BACPHL
	LDA	X,BACPHH
	SBC	LAVEHH
	STA	X,BACPHH
	JSR WRPRND
	CPX I,2
	IFCC
	LDA X,ASCPHF+2
	SEC
	SBC LAVEHF
	STA X,ASCPHF+2
	LDA X,ASCPHL+2
	SBC LAVEHL
	STA X,ASCPHL+2
	LDA X,ASCPHH+2
	SBC LAVEHH
	STA X,ASCPHH+2
	JSR WRPRND
	THEN
	DEX
	MIEND
	RTS


WRPRND: LDA X,BACPHH
	IFMI
	CMP I,0F8
	IFCC
	JMP BITXOR
	THEN
	ELSE
	CMP I,8
	IFCS
	JMP BITXOR
	THEN
	THEN
	RTS


BITXOR: LDA X,BACPHH
	IFPL
	SEC
	SBC I,10
	ELSE
	CLC
	ADC I,10
	THEN
	STA X,BACPHH
	RTS
	.PAGE



	.SBTTL	MOVE ALIEN SHIPS

UPASPS: LDX I,1
	BEGIN
	JSR ASHMOV
	DEX
	MIEND
	RTS
ASHMOV:
	LDA I,3
	STA TOPLIM
	LDA I,0FB
	STA BTMLIM
	STA NHLIM
	LDA I,4
	STA PHLIM
	LDY PLAYUP
	LDA Y,ASHSPD
	STA DIFF1
	LDA Y,APDEAD
	IFNE
	RTS
	THEN
ASHMV1:	LDA X,ASDETM
	IFNE
	RTS
	THEN
	LDA X,ASCPVH
	IFMI
	BIT BTMLIM
	BPL 10$
	CMP BTMLIM
	IFEQ
	CMP LACPVH
	IFCC
	CPX I,2
	IFCS
	LDA I,0
	STA X,ASVEVH
	STA X,ASVEVL
	STA X,ASVEVF
	ELSE
10$:	JSR MOVUP
	THEN
	ELSE
	JSR MOVUP
	THEN
	THEN
	ELSE
	CMP BTMLIM
	IFEQ
	CMP LACPVH
	IFCS
	CPX I,2
	IFCS
	LDA I,0
	STA X,ASVEVH
	STA X,ASVEVL
	STA X,ASVEVF
	ELSE
	JSR MOVUP
	THEN
	ELSE
	JSR MOVUP
	THEN
	ELSE
	CMP TOPLIM
	IFCS
	JSR MOVDN
	THEN
	THEN
	THEN
	LDA X,ASCPVF
	CLC
	ADC X,ASVEVF
	STA X,ASCPVF
	LDA X,ASCPVL
	ADC X,ASVEVL
	STA X,ASCPVL
	LDA X,ASCPVH
	ADC X,ASVEVH
	STA X,ASCPVH
	LDA X,ASCPHH
	IFMI
	CMP NHLIM
	IFEQ
	JSR MOVRT
	THEN
	ELSE
	CMP PHLIM
	IFCS
	JSR MOVLF
	THEN
	THEN
	LDA X,ASCPHF
	CLC
	ADC X,ASVEHF
	STA X,ASCPHF
	LDA X,ASCPHL
	ADC X,ASVEHL
	STA X,ASCPHL
	LDA X,ASCPHH
	ADC X,ASVEHH
	STA X,ASCPHH
	RTS
UPATSP:	LDA FRAME
	AND I,0FF
	IFEQ
	LDA GTIMER
	AND I,1
	IFEQ
	LDX PLAYUP
	CLC
	LDA X,PATSPD
	ADC I,1
	CMP I,10
	IFCS
	LDA I,10
	THEN
	STA X,PATSPD
	LDA X,WAVENO
	TAY
	LDA Y,SHRAMP
	CLC
	ADC X,SHOTPR
	IFMI
	LDA I,80
	THEN
	STA X,SHOTPR
	THEN
	THEN
	RTS

UPASPD:	LDA FRAME
	AND I,0FF
	IFEQ
	LDA GTIMER
	AND I,3
	IFEQ
	LDX PLAYUP
	LDA X,ASHSPD
	CLC
	ADC I,1
	CMP I,7
	IFCS
	LDA I,7
	THEN
	STA X,ASHSPD
	THEN
	THEN
	RTS
SHRAMP:	.BYTE 1,2,3,4,5,6,7,8
	.PAGE
	.SBTTL SET SHIP VEL
SEASVE: LDX I,1
	BEGIN
	JSR SETVEL
	DEX
	MIEND
	RTS
RNDVEL: 
	LDA X,ASVETM
	IFEQ
	JSR UPRDN
	JSR LFORRT
	ELSE
	DEC X,ASVETM
	THEN
	RTS

PATVEL: LDA I,1
	STA TEMP1
	LDX PLAYUP
	LDA X,PATSPD
	STA DIFF1
	LDX I,3
	BEGIN
	JSR SETVL1
	DEX
	DEC TEMP1
	MIEND
	RTS
PATPLM: .BYTE 3,3,3,0,0,4,3,3
	.BYTE 3,3,3,3,3,3,3

PABTLM: .BYTE -1,-1,-1,-1,0,3,1,-1
	.BYTE 0,0,1,0,0,0,0

PATMOV: LDA ZOOMST
	IFEQ
	LDX PLAYUP
	LDA X,PATSPD
	STA DIFF1
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,8
	IFEQ
	LDA X,PATPLM
	STA TOPLIM
	LDA X,PABTLM
	STA BTMLIM
	LDA I,0F7
	STA NHLIM
	LDA I,9
	STA PHLIM
	LDA I,1
	STA TEMP1
	LDX I,3
	BEGIN
	JSR ASHMV1
	LDA X,ASCPHH
	IFMI
	CMP I,0F8
	IFCC
	LDA I,7
	STA X,ASCPHH
	THEN
	ELSE
	CMP I,8
	IFCS
	LDA I,0F9
	STA X,ASCPHH
	THEN
	THEN
	DEX
	DEC TEMP1
	MIEND
	THEN
	THEN
	RTS
SETVEL:	LDY PLAYUP 
	LDA Y,ASHSPD
	STA DIFF1
	LDA Y,APDEAD
	IFEQ
SETVL1:	LDA X,ASVETM
	IFEQ
	LDA X,ASCPVL
	STA POINT1
	LDA X,ASCPVH
	STA POINT2
	LDA X,ASCPHL
	STA POINT3
	LDA X,ASCPHH
	STA POINT4
	JSR LODCOR
	STX TEMP4
	JSR ABSDIF
	LDX TEMP4
	CPX I,3
	IFEQ
	JSR MOVRT
	ELSE
	CPX I,2
	IFEQ
	JSR MOVLF
	ELSE
	LDA ASQUAD
	AND I,2
	IFEQ
	JSR MOVLF
	ELSE
	JSR MOVRT
	THEN
	THEN
	THEN
	LDA ASQUAD
	AND I,1
	IFEQ
	JSR MOVDN
	ELSE 
	JSR MOVUP
	THEN
	ELSE
	DEC X,ASVETM
	THEN
	THEN
	RTS

MOVRT:
	 LDA I,0
	STA X,ASVEHH
	LDA RANDOM
	STA X,ASVEHF
	AND I,0F
	STA X,ASVETM
	LDA DIFF1
	STA X,ASVEHL
	RTS


MOVLF:
	LDA I,0
	SEC
	SBC DIFF1
	STA X,ASVEHL
	LDA RANDOM
	STA X,ASVEHF
	AND I,0F
	STA X,ASVETM
	LDA I,0FF
	STA X,ASVEHH
	RTS


MOVUP:
	LDA I,0
	STA X,ASVEVH
	LDA RANDOM
	STA X,ASVEVF
	AND I,7
	STA X,ASVETM
	LDA DIFF1
	STA X,ASVEVL
	RTS


MOVDN:
	LDA I,0
	SEC
	SBC DIFF1
	STA X,ASVEVL
	LDA RANDOM
	STA X,ASVEVF
	AND I,7
	STA X,ASVETM
	LDA I,0FF
	STA X,ASVEVH
	RTS

UPRDN:  LDA RANDOM
	BMI MOVDN
	BPL MOVUP

LFORRT: LDA RANDOM
	BMI MOVLF
	JMP MOVRT
	
	.PAGE
	.SBTTL	UPDATE ZOOM STATUS
CTLZUM: LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	IFPL
	LDA ZOOMST
	IFEQ			;IF ZOOM INACTIVE
	LDA LACPVH
	IFEQ			;IF @ ZOOM IN LIMIT-NEG.
	LDA LSCALE
	IFNE			;IF NOT ALREADY ZOOMED IN
	LDA I,80
	STA ZOOMST		;SET STATUS TO ZOOM IN
	THEN
	ELSE
	IFPL
	CMP I,3			;IF @ ZOOM OUT LIMIT
	IFCS
	LDA LSCALE		;IF NOT ALREADY ZOOMED OUT
	IFPL
	LDA I,40		;SET STATUS ZOOM OUT
	STA ZOOMST
	THEN
	THEN
	THEN
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL	ZOOM UPDATE
; FUNCTION:	UPDATE LINEAR SCALE TO ZOOM IN OR
;		OUT PICTURE
; INPUTS:	LACPVH: LANDER V POSITION HI BYTE
;		LSCALE: CURRENT LINEAR SCALE FACTOR
;		ZUMIN:	V COORD TO START ZOOMING IN
;		ZUMOUT:	V COORD TO START ZOOMING OUT
; OUTPUTS:	LSCALE:	UPDATED
;		ZOOMST:	UPDATED (IF NECESSARY)
;		LANDER COORDS: UPDATED (IF NECESSARY)
ZOOM:	BIT ZOOMST
	IFMI			;IF CURRENTLY ZOOMING IN
	LDA LSCALE
	IFNE			;IF NOT ZOOMED ALL THE WAY IN
	SEC
	SBC I,4
	STA LSCALE
	JSR ADDPOS
	LDA LACPHH
	IFMI
	CMP I,0FF
	IFCC			;IF HPOS PAST READJUST LIMITS
	JSR ADHPOS		;GO READJUST
	THEN
	ELSE
	CMP I,1
	IFCS
	JSR SBHPOS
	THEN
	THEN
	ELSE
	STA ZOOMST		;SET ZOOM STATUS INACTIVE
	THEN
	THEN
	BIT ZOOMST
	IFVS			;IF ZOOMING OUT
	LDA LSCALE
	IFPL			;IF NOT AT ZOOM OUT LIMIT
	CLC
	ADC I,4
	STA LSCALE
	JSR SUBPOS		;ADJUST VCOORD
	LDA LACPHH
	IFMI
	CMP I,0FF
	IFCC			;IF PAST NEGATIVE ADJUST LIMIT
	JSR SBHPOS		;ADJUST
	THEN
	ELSE
	CMP I,1
	IFCS			;IF PAST POSITIVE ADJUST LIMIT
	JSR ADHPOS
	THEN
	THEN
	ELSE
	LDA I,0
	STA ZOOMST
	THEN
	THEN
	RTS
	.PAGE
ADDPOS:	LDA LACPVL
	CLC
	ADC I,10
	STA LACPVL
	IFCS
	INC LACPVH
	THEN
	LDA VLEGEL
	CLC
	ADC I,10
	STA VLEGEL
	IFCS
	INC VLEGEH
	THEN
	JMP	ZADVPS
SUBPOS:	LDA LACPVL
	SEC
	SBC I,10
	STA LACPVL
	IFCC
	DEC LACPVH
	THEN
	LDA VLEGEL
	SEC
	SBC I,10
	STA VLEGEL
	IFCC
	DEC VLEGEH
	THEN
	JMP	ZSBVPS
SBHPOS:	LDA LACPHL
	SEC
	SBC I,9
	STA LACPHL
	IFCC
	DEC LACPHH
	THEN
	LDA OVRSCN
	CLC
	ADC I,9
	STA OVRSCN
	IFCS
	LDA LFTSCT
	ADC I,0
	AND I,0F
	STA LFTSCT
	THEN
	JMP	ZSBHPS
ADHPOS:	LDA LACPHL
	CLC
	ADC I,9			;ADJUST LANDER POSITION VECTOR
	STA LACPHL
	IFCS
	INC LACPHH
	THEN
	LDA OVRSCN		;ADJUST MONITOR OVERSCAN
	SEC
	SBC I,9
	STA OVRSCN
	IFCC
	LDA LFTSCT		;WRAPPED SECTOR
	SBC I,0
	AND I,0F
	STA LFTSCT
	THEN
	JMP	ZADHPS
	.PAGE
	.SBTTL ADJUST V POSITIONS DURING ZOOMING



ZADVPS:	LDX	I,ASHOTS+PSHOTS+NBASES+1
	BEGIN
	LDA	X,BACPVL
	CLC
	ADC	I,10
	STA	X,BACPVL
	IFCS
	INC	X,BACPVH
	THEN
	CPX I,2
	IFCC
	LDA X,ASCPVL+2
	ADC I,10
	STA X,ASCPVL+2
	IFCS
	INC X,ASCPVH+2
	THEN
	THEN
	DEX
	MIEND
	RTS



ZSBVPS:	LDX	I,ASHOTS+PSHOTS+NBASES+1
	BEGIN
	LDA	X,BACPVL
	SEC
	SBC	I,10
	STA	X,BACPVL
	IFCC
	DEC	X,BACPVH
	THEN
	CPX I,2
	IFCC
	LDA X,ASCPVL+2
	SBC I,0F
	STA X,ASCPVL+2
	IFCC
	DEC X,ASCPVH+2
	THEN
	THEN
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL ADJUST H POSITIONS DURING SCROLLING


ZADHPS:	LDX	I,ASHOTS+PSHOTS+NBASES+1
	BEGIN
	LDA	X,BACPHL
	CLC
	ADC	I,9
	STA	X,BACPHL
	IFCS
	INC	X,BACPHH
	THEN
	CPX I,2
	IFCC
	LDA X,ASCPHL+2
	ADC I,9
	STA X,ASCPHL+2
	IFCS
	INC X,ASCPHH+2
	THEN
	THEN
	DEX
	MIEND
	RTS



ZSBHPS:	LDX	I,ASHOTS+PSHOTS+NBASES+1
	BEGIN
	LDA	X,BACPHL
	SEC
	SBC	I,9
	STA	X,BACPHL
	IFCC
	DEC	X,BACPHH
	THEN
	CPX I,2
	IFCC
	LDA X,ASCPHL+2
	SBC I,8
	STA X,ASCPHL+2
	IFCC
	DEC X,ASCPHH+2
	THEN
	THEN
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL SHOT VS. LAND COLLISION




SHVSGR: LDA I,HEDGEL
	SEC
	SBC OVRSCN
	STA XACL2
	LDA I,HEDGEH
	SBC I,0
	STA XACH2
	LDA LFTSCT
	ASL
	TAY
	LDA VLEGEL
	CLC
	ADC NY,SCTVOS
	STA YACL2
	LDA VLEGEH
	INY
	ADC NY,SCTVOS
	DEY
	STA YACH2
	LDX I,PSHOTS-1
	STX TEMP1
	BEGIN
	LDX TEMP1
	LDA X,SHACTM
	IFEQ
	JMP SKIP
	THEN
	LDA X,SHCPHL
	SEC
	SBC XACL2
	STA POINT1
	LDA X,SHCPHH
	SBC XACH2
	STA POINT2
	CLC
	ADC LFTSCT
	AND I,0F
	STA TEMP2
	LDA LFTSCT
	STA TEMP3
	LDY I,3
	BEGIN
	LDA Y,XACL2
	STA Y,XACCL
	DEY
	MIEND
	BEGIN
	LDA TEMP3 
	ASL
	TAY
	INC XACCH
	LDA YACCL
	CLC
	ADC NY,SCTVDL
	STA YACCL
	LDA YACCH
	INY
	ADC NY,SCTVDL
	DEY
	STA YACCH
	INC TEMP3
	LDA TEMP3
	AND I,0F
	STA TEMP3
	CMP TEMP2
	EQEND
	TAY
	LDA NY,SEGCNT
	IFEQ
	JMP SKIP
	THEN
	STA TEMP3
	LDA NY,SGTBIX
	TAY
	BEGIN
	JSR SEGTST
	IFCS
	LDA NY,XDELTA
	IFNE
	LDA NY,SLOPE
	STA MUPYER
	LDA X,SHCPHL
	SEC
	SBC XACCL
	STA TEMP4
	LDA X,SHCPHH
	SBC XACCH
	IFMI
	LDA I,0
	SEC
	SBC TEMP4
	STA TEMP4
	THEN
	LDA TEMP4
	STA MUPCAN
	STY TEMP2
	JSR MULTIPLY
	LDA RESH
	STA POINT1
	LDY TEMP2
	INY
	LDA NY,SLOPE
	DEY
	AND I,7F
	STA MUPYER
	JSR MULTIPLY
	LDY TEMP2
	LDA RESL
	CLC
	ADC POINT1
	STA POINT1
	LDA I,0
	ADC RESH
	STA POINT2
	INY
	LDA NY,SLOPE
	JSR ADDELT
	DEY
	LDA X,SHCPHL
	STA POINT3
	LDA X,SHCPHH
	STA POINT4
	JSR LSHCOR
	LDA I,0
	STA OGLORY
	STX TEMP4
	JSR COLTST
	LDX TEMP4
	IFCC
	LDA I,0
	STA X,SHACTM
	THEN
	THEN
	THEN
	JSR ADDSEG
	DEC TEMP3
	EQEND
SKIP:	DEC TEMP1
	MIEND
	RTS


CKSUM6: .BYTE 19
ADDELT: IFMI
	LDA YACCL
	SEC
	SBC POINT1
	STA POINT1
	LDA YACCH
	SBC POINT2
	STA POINT2
	ELSE
	LDA YACCL
	CLC
	ADC POINT1
	STA POINT1
	LDA YACCH
	ADC POINT2
	STA POINT2
	THEN
	RTS
ADDSEG:	LDA YACCL
	CLC
	ADC NY,YDELTA
	
	STA YACCL
	LDA YACCH
	INY
	ADC NY,YDELTA
	DEY
	STA YACCH
	LDA XACCL
	CLC
	ADC NY,XDELTA
	STA XACCL
	LDA XACCH
	INY
	ADC NY,XDELTA
	STA XACCH
	INY
	RTS
	.PAGE


LSHCOR:
	LDA X,SHCPVL
	STA POINT5
	LDA X,SHCPVH
	STA POINT6
	LDA X,SHCPHL
	STA POINT7
	LDA X,SHCPHH
	STA POINT8
	RTS



SEGTST: LDA XACCL
	SEC
	SBC X,SHCPHL
	LDA XACCH
	SBC X,SHCPHH
	STA TEMP4
	LDA XACCL
	CLC
	ADC NY,XDELTA
	STA POINT3
	LDA XACCH
	INY
	ADC NY,XDELTA
	DEY
	STA POINT4
	LDA POINT3
	SEC
	SBC X,SHCPHL
	LDA POINT4
	SBC X,SHCPHH
	EOR TEMP4
	IFMI
	SEC
	ELSE
	CLC
	THEN
	RTS
	.PAGE
	.SBTTL	CONTROL LOOP FOR COLLISION DETECT
; INPUTS:	LACPV,LACPH=LANDER POSITION
;
;		SECTOR=RESIDENT SECTOR OF LANDER
;
;		SECADR=TABLE OF ADDRESSES OF
;			ROUTINES THAT DRAW A SECTOR
;
; OUTPUTS:
;
COLDCT: LDX I,3
	BEGIN
	LDA X,XACL2
	STA X,XACCL
	DEX
	MIEND
	LDA LFTSCT
	STA TEMP1
	BEGIN			;POINT TO STARTING POINT OF EACH SECTOR
	LDA TEMP1
	ASL
	TAY
	INC XACCH	; SECTORS 100 WIDE
	LDA YACCL
	CLC
	ADC NY,SCTVDL
	STA YACCL
	LDA YACCH
	INY
	ADC NY,SCTVDL
	STA YACCH
	INC TEMP1
	LDA TEMP1		;POINTING TO LANDER SECTOR?
	AND I,0F
	STA TEMP1
	CMP SECTOR
	EQEND
	LDX I,3
	BEGIN
	LDA X,XACCL
	STA X,XACL2
	DEX
	MIEND
	LDY SECTOR
	LDA NY,SEGCNT
	IFEQ
	RTS		; NOTHING HERE
	THEN
	STA TEMP1
	LDA NY,SGTBIX		;LOAD INDEX OF THIS SECTOR DATA
	TAY
	BEGIN
	JSR CKUNDR
	IFCS
	LDA NY,XDELTA
	IFNE
	LDA NY,SLOPE		;GET FRACTIONAL SLOPE AND
	STA MUPYER		;MULTIPLY BY DIFFERENCE BETWEEN
	LDA LACPHL
	SEC
	SBC XACCL
	STA TEMP4
	LDA LACPHH
	SBC XACCH
	IFMI
	LDA I,0
	SEC
	SBC TEMP4
	STA TEMP4
	THEN
	LDA TEMP4
	STA MUPCAN
	STY TEMP2
	JSR MULTIPLY
	LDY TEMP2
	LDA RESH
	STA POINT1		;SAVE INTEGER RESLT OF FRACTIONAL MULTIPLY
	INY
	LDA NY,SLOPE		;GET INTEGER SLOPE
	AND I,7F
	STA MUPYER
	JSR MULTIPLY		;MULTIPLY BY SAME DIFFERENCE
	LDY TEMP2
	LDA RESL
	CLC
	ADC POINT1		;ACCUMULATE RESULT
	STA POINT1
	LDA I,0
	ADC RESH
	STA POINT2
	INY
	LDA NY,SLOPE
	JSR ADDELT
	DEY
	LDA	LACPHL
	STA	POINT3
	LDA	LACPHH
	STA	POINT4
	JSR LODCOR		;TRANSFER SHIP COORDS TO POINT LOCS
	LDA I,0
	STA OGLORY
	JSR COLTST		;TEST FOR COLLISION
	IFCC
	JMP COLIDE		;GO KILL SHIP
	THEN
	THEN
	THEN
	JSR ADDSEG
	DEC TEMP1
	EQEND
	RTS
SIRNAD:	.WORD SIRN01,SIRN02,SIRN03,SIRN04
	.WORD SIRN05,SIRN06,SIRN07,SIRN08
	.WORD SIRN09,SIRN10,SIRN11,SIRN12
	.WORD SIRN13,SIRN14,SIRN15,SIRN16
NIMIAD: .WORD 0,0,0,0
	.WORD NIMI01,NIMI02,NIMI03,NIMI04
	.WORD NIMI05,NIMI06,NIMI07,NIMI08
	.WORD 0,0,0,0
DURNAD:	.WORD DURN01,DURN02,DURN03,DURN04
	.WORD DURN05,DURN06,DURN07,DURN08
	.WORD DURN09,DURN10,DURN11,DURN12
	.WORD DURN13,DURN14,DURN15,DURN16
CNTCAD:	.WORD CNTC01,CNTC02,CNTC03,CNTC04
	.WORD CNTC05,CNTC06,CNTC07,CNTC08
	.WORD CNTC09,CNTC10,CNTC11,CNTC12
	.WORD CNTC13,CNTC14,CNTC15,CNTC16
NOVAAD:
	.WORD 0,0,0,NOVA01
	.WORD NOVA02,NOVA03,NOVA04,NOVA05
	.WORD NOVA06,NOVA07,NOVA08,NOVA09
	.WORD NOVA10,0,0,0
EASYAD:	.WORD EASY01,EASY02,EASY03,EASY04
	.WORD EASY05,EASY06,EASY07,EASY08
	.WORD EASY09,EASY10,EASY11,EASY12
	.WORD EASY13,EASY14,EASY15,EASY16
BIZRAD:	.WORD BIZR01,BIZR02,BIZR03,BIZR04
	.WORD BIZR05,BIZR06,BIZR07,BIZR08
	.WORD BIZR09,BIZR10,BIZR11,BIZR12
	.WORD BIZR13,BIZR14,BIZR15,BIZR16
VOLCAD:	.WORD 0,0,0,VOLC01
	.WORD VOLC02,VOLC03,VOLC04,VOLC05
	.WORD VOLC06,VOLC07,VOLC08,VOLC09
	.WORD VOLC10,0,0,0
ERCTAD:	.WORD ERCT01,ERCT02,ERCT03,ERCT04
	.WORD ERCT05,ERCT06,ERCT07,ERCT08
	.WORD ERCT09,ERCT10,ERCT11,ERCT12
	.WORD ERCT13,ERCT14,ERCT15,ERCT16
DUCAAD:
FLOTAD:	.WORD FLOT01,FLOT02,FLOT03,FLOT04
	.WORD FLOT05,FLOT06,FLOT07,FLOT08
	.WORD FLOT09,FLOT10,FLOT11,FLOT12
	.WORD FLOT13,FLOT14,FLOT15,FLOT16
SURRAD:	.WORD 0,0,0,SURR01
	.WORD SURR02,SURR03,SURR04,SURR05
	.WORD SURR06,SURR07,SURR08,SURR09
	.WORD SURR10,0,0,0
DIFFAD:	.WORD DIFF01,DIFF02,DIFF03,DIFF04
	.WORD DIFF05,DIFF06,DIFF07,DIFF08
	.WORD DIFF09,DIFF10,DIFF11,DIFF12
	.WORD DIFF13,DIFF14,DIFF15,DIFF16
	.PAGE
VDSIRN:	.WORD -100,0,1E0,-140
	.WORD -0E0,0,1C0,-0C0
	.WORD 0,0C0,-80,-120
	.WORD 0,0,220,-100
VDNIMI: .WORD 0,0,0,0
	.WORD -120,-60,0A0,-60
	.WORD 0,-0E0,1E0,0
	.WORD 0,0,0,0
VDDURN:	.WORD -180,-0E0,0,60,0E0,-120,40,200
	.WORD -180,-40,-80,80,1C0,-1A0,40,160
VDCNTC:	.WORD 80,-40,20,0,-60,0,80,40
	.WORD 0,-80,40,-60,20,0,40,-80
VDNOVA:	.WORD 0,0,0,-100
	.WORD -100,-100,0,0
	.WORD 0,0,100,100
	.WORD 100,0,0,0
VDEASY:	.WORD 0,-100,0,100
	.WORD 0,0,-100,-100
	.WORD 0,100,0,100
	.WORD -100,0,100,0
VDBIZR:	.WORD -100,0,0,0
	.WORD 0,200,-300,0
	.WORD 100,100,0,100
	.WORD -100,0,0,0
VDVOLC:	.WORD 0,0,0,-100
	.WORD -100,0,200,0
	.WORD -100,0,0,100
	.WORD 100,0,0,0
VDERCT:	.WORD 0,2C0,0C0,200
	.WORD -440,0,-1C0,0
	.WORD 100,0,0,0
	.WORD 0,0,0,-80
VDFLOT:
VDDUCA:	.WORD 0,0,0,0
	.WORD 0,0,0,0
	.WORD 0,0,0,0
	.WORD 0,0,0,0
VDSURR:	.WORD 0,0,0,-100
	.WORD -100,100,0,-100
	.WORD 100,0,-100,100
	.WORD 100,0,0,0
VDDIFF:	.WORD -100,-200,0,0
	.WORD 0,0,0C0,0
	.WORD 0C0,0,-100,0
	.WORD -140,80,100,240
	.PAGE
	.SBTTL	TEST FOR COLLISION BETWEEN 2 POINTS
;INPUTS:POINT1,POINT2 VCOORDS FOR OBJ 1
;	POINT3,POINT4 HCOORDS FOR OBJ 1
;	POINT5,POINT6 VCOORDS FOR OBJ 2
;	POINT7,POINT8 HCOORDS FOR OBJ 2
;
;
;OUTPUTS0

ABSDIF:	LDX I,2			;LOOP FOR H&V
	BEGIN
	LDA X,POINT1
	SEC			;GET DELTAS
	SBC X,POINT5
	STA X,POINT1
	LDA X,POINT2
	SBC X,POINT6
	STA X,POINT2
	DEX
	DEX
	MIEND
	LDA I,0
	STA ASQUAD
	LDX I,2
	BEGIN
	LDA X,POINT2		;MAKE SURE DELTA IS
	IFMI			;POSITIVE
	LDA I,0
	SEC
	SBC X,POINT1
	STA X,POINT1
	LDA I,0
	SBC X,POINT2
	STA X,POINT2
	LDA ASQUAD
	ORA X,QUABIT
	STA ASQUAD
	THEN
	DEX
	DEX
	MIEND
	RTS

QUABIT: .BYTE 1,0,2

COLTST: JSR ABSDIF
	LDA POINT2
	ORA POINT4
	IFEQ
	LDX OGLORY
	IFMI
	JMP TSTBAS
	THEN
	LDA POINT1		;CHECK V RANGE
	CMP X,VSIZE
	IFCC
	LDA POINT3		;CHECK H RANGE
	CMP X,HSIZE
	IFCC
	ADC POINT1
	CMP X,DSIZE
	THEN
	THEN
	LDA POINT1
	ELSE
	SEC
	THEN
	RTS			;RETURN CC=COLLIDED, CS=NO COLLISION
TSTBAS: LDY TEMP2
	LDA POINT1
	CMP Y,BASIZV
	IFCC
	LDA POINT3
	CMP Y,BASIZH
	IFCC
	ADC POINT1
	CMP Y,BASIZD
	THEN
	THEN
	RTS
BASIZV: .BYTE 24,24,24,24,24,24,24,24

BASIZH: .BYTE 2E,2E,2E,2E,2E,2E,2E,2E

BASIZD: .BYTE 40,40,40,40,40,40,40,40
VSIZE:	.BYTE 13,10,23,30
HSIZE:	.BYTE 11,14,24,50
DSIZE:	.BYTE 18,1C,32,70
	.PAGE
	.PAGE
	.SBTTL	CHECK FOR SEGMENT UNDER/OVER LANDER
CKUNDR:	LDA XACCL		;GET DIFF BETWEEN LEFT
	SEC			;COORDINATE AND LANDER
	SBC LACPHL
	STA DIFF1
	LDA XACCH
	SBC LACPHH
	STA TEMP2
	IFEQ
	LDA DIFF1
	CMP I,2
	IFCC
	SEC		;GO CHECK FOR COLLISION ( SPECIAL CASE )
	RTS
	THEN
	THEN
	LDA XACCL		;ADD IN VECTOR DELTAS
	CLC
	ADC NY,XDELTA
	STA TEMP3
	LDA XACCH
	INY
	ADC NY,XDELTA
	DEY
	STA TEMP4
	LDA TEMP3		;GET NEW DIFFERENCE
	SEC
	SBC LACPHL
	LDA TEMP4
	SBC LACPHH
	EOR TEMP2		;CHECK FOR OPOSITE SIGNS
	IFMI
	SEC			;MUST BE UNDER/OVER LANDER
	ELSE
	CLC			;ISN'T
	THEN
	RTS
	.PAGE
	.SBTTL	LOAD LANDER COORDS FOR COLTST
LODCOR:	LDA LACPVL
	STA POINT5
	LDA LACPVH
	STA POINT6
	LDA LACPHL
	STA POINT7
	LDA LACPHH
	STA POINT8
	RTS
COLIDE: JSR LAEXCO
	JSR STREXP
	JSR EXPLOS
	RTS

LAEXCO: LDA I,0
	LDX PLAYUP
	STA X,PLADED
FRSTOS: LDA LACPVL
	STA POINT1
	LDA LACPVH
	STA POINT2
	LDA LACPHL
	STA POINT3
	LDA LACPHH
	STA POINT4
	RTS
	.PAGE
	.SBTTL	COLLISION DATA TABLES
XSIRN:	.WORD 64.,96.,96.,-96.,96.
	.WORD 64.,192.
	.WORD 192.,-192.,96.,64.,96.
	.WORD 128.,-128.,255.
	.WORD 96.,-96.,64.,192.,-192.,192.
	.WORD 255.
	.WORD 160.,-160.,255.
	.WORD 255.
	.WORD 255.
	.WORD 255.
	.WORD 255.
	.WORD 255.
	.WORD 255.,0,-192.,64.,-128.,255.
	.WORD 255.,-255.,255.,-255.
	.WORD 160.,-160.,128.,128.
	.WORD 192.,64.
YSIRN:	.WORD 0,96.,-192.,-160.,0
	.WORD 0,0
	.WORD 320.,192.,64.,0,-96.
	.WORD -128.,-192.,0
	.WORD 192.,224.,0,-96.,-416.,-128.
	.WORD 0
	.WORD 320.,224.,-96.
	.WORD -192.
	.WORD 0
	.WORD 192.
	.WORD -128.
	.WORD -288.
	.WORD 0,224.,64.,128.,160.,0
	.WORD 0,224.,352.,0
	.WORD 0,288.,0,256.
	.WORD -256.,0
SLSIRN:	.WORD 0,100,8200,81AA,0
	.WORD 0,0
	.WORD 1AA,100,0AA,0,8100
	.WORD 8100,8180,0
	.WORD 200,255,0,8080,8220,80AA
	.WORD 0
	.WORD 200,166,8060
	.WORD 80C0
	.WORD 0
	.WORD 0C0
	.WORD 8080
	.WORD 8110
	.WORD 0,8100,55,200,140,0
	.WORD 0,8100,160,0
	.WORD 0,1CC,0,200
	.WORD 8155,0
IXSIRN: .BYTE 0,0A,0E,18,1E,2A,2C,32
	.BYTE 34,36,38,3A,3C,48,50,58
CTSIRN:	.BYTE 5,2,5,3,6,1,3,1
	.BYTE 1,1,1,1,6,4,4,2
	.PAGE
	.RADIX 10
XNIMI:	.WORD 192.,64.,0,-160.,160.,-128,-128
	.WORD 96,96,64,0,-64,64,0,-64,-192
	.WORD 96,-96,0,96,160,-128,128,0,-96,96,-128,-128
	.WORD 160,96,0,-128,-128
	.WORD 255,0,-255,96,128,-128,-96
	.WORD 255,-255,160,96,-96,96,0,-96,-160
	.WORD 64,128,64,-96,96,-64,64,0,-64,64,-160,-96
	.WORD 192,64,-128,-32,-96
YNIMI:	.WORD 0,64.,-352.,0,160.,0,128.
	.WORD -96,64,-64,-192,-64,0,896,0,-192
	.WORD -96,-96,-64,0,160,128,128,800,-96,-96,0,-128
	.WORD 0,-96,768,0,128
	.WORD 0,1150,-128,0,-128,-128,0
	.WORD 0,-256,-160,96,0,96,992,0,384
	.WORD 64,0,64,96,128,64,64,288,64,64,0,96
	.WORD 0,64,128,0,96
	.RADIX 16
SLNIMI:	.WORD 0,100,0,0,100,0,100
	.WORD 8100,0AA,8100,100,8100,0,100,0,8100
	.WORD 8100,8100,100,0,100,100,100,8100,8100,8100,0,8100
	.WORD 0,8100,100,0,100
	.WORD 0,0,8081,0,8100,8100,0
	.WORD 0,8100,8100,100,0,100,0,0,266
	.WORD 100,0,100,100,100,100,100,0,100,100,0,100
	.WORD 0,100,100,0,100
IXNIMI:	.BYTE 0,0,0,0,0,0E,20,38
	.BYTE 42,50,62,7A,0,0,0,0
CTNIMI:	.BYTE 0,0,0,0,7,9,12.,5
	.BYTE 7,9,12.,5,0,0,0,0
	.PAGE
	.RADIX 10
XDURN:	.WORD 255.,-192,192
	.WORD 255.,0.,-96,96.
	.WORD 255.,0.,-96,-160,0.,255.
	.WORD 160.,96.,0.,-255,0.,255.
	.WORD 96,96,64.,0.,-96.,-64.,-96.,0.,255.
	.WORD 128,-128,0.,255.,0.,-160,96.,64.
	.WORD 96,160.,0.,-64,-96.,-96.,0.,64.,-64.,255.
	.WORD 160.,96,-255,255.
	.WORD 255.,0.,-96.,96.
	.WORD 255.,0.,-64.,-192.,0.,255
	.WORD 128.,128.,0.,-224.,-32.,0.,255.
	.WORD 96.,160.,0.,-224.,-32.,0.,255
	.WORD 96.,160.,-192.,-64.,0.,255.
	.WORD 64.,64.,128
	.WORD 128.,64.,64.,0.,-255.,128,128.
	.WORD 192.,-192,0.,255
YDURN:	.WORD 0.,-192,-192.
	.WORD -224.,384.,224,0.
	.WORD 0.,224.,0.,160.,224.,0.
	.WORD 0.,96.,384.,-256,384.,0.
	.WORD 160.,0.,64.,160.,64.,0.,-64.,128.,0.
	.WORD 0.,160.,128.,0.,-256,-224.,-96.,0.
	.WORD 64.,0.,256.,-128.,128.,0.,256.,-64.,-64.,-128.
	.WORD 128.,160.,224.,0.
	.WORD -384.,256.,128.,0.
	.WORD -64.,192.,0.,128.,128.,0.
	.WORD -128.,0,384.,0,-64.,256,0.
	.WORD 128.,0.,320.,0.,-64.,192,0.
	.WORD 128.,0.,192.,0.,128.,0.
	.WORD -128.,-96.,192
	.WORD 0.,64.,0.,224.,0.,128.,0
	.WORD 0,224,128,0.
	.RADIX 16
SLDURN:	.WORD 0,8100,8100
	.WORD 80E0,0,255,0
	.WORD 0,0,0,100,0,0
	.WORD 0,100,0,8100,0,0
	.WORD 1AA,0,100,0,0AA,0,80AA,0,0
	.WORD 0,100,0,0,0,8166,8100,0
	.WORD 0AA,0,0,8200,155,0,0,8100,8100,8080
	.WORD 0CC,1AA,0E0,0
	.WORD 8180,0,155,0
	.WORD 8040,0,0,0AA,0,0
	.WORD 8100,0,0,0,8200,0,0
	.WORD 155,0,0,0,8200,0,0
	.WORD 155,0,100,0,0,0
	.WORD 8200,8180,8180
	.WORD 0,100,0,0,0,100,0
	.WORD 0,12B,0,0
IXDURN:	.BYTE 0,6,0E,1A,26,38,48,5C
	.BYTE 64,6C,78,86,94,0A0,0A6,0B4
CTDURN:	.BYTE 3,4,6,6,9,8,10.,4
	.BYTE 4,6,7,7,6,3,7,4
	.PAGE
XCNTC:	.WORD 255.,0.,-64.,-64.,-128.,0.,255.
	.WORD 128.,64.,64.,0.,-64.,-64.,-128.,0.,255.
	.WORD 32.,96.,64.,64.,0.,-255.,0.,255.
	.WORD 64.,128.,64.,0.,-255.,0.,192.,64.
	.WORD 64.,64.,128.
	.WORD 32.,64.,160.,0,-128.,-64.,-64.,64.,192.
	.WORD 32.,64.,32.,128.,0.,-128.,-64.,-64.,0.,192.,64.
	.WORD 64.,96.,96.
	.WORD 128.,64.,64.,0,-64.,-64.,-128.,64.,192.
	.WORD 64.,64.,96.,32.,0.,-64.,-64.,-128.,0,255.
	.WORD 64.,64.,64.,64.,0.,-255.,0.,255.
	.WORD 64.,64.,64.,64.,0.,-255.,0.,255.
	.WORD 64.,64.,64.,64.,0.,-255.,0.,255.
	.WORD 64.,64.,128.,0,-64.,-64.,-128.,0,192.,64.
	.WORD 96.,160.
	.WORD 64.,64.,64.,64.,0.,-255.,64.,192.
YCNTC:	.WORD 128.,480.,-160.,160.,0.,64.,0.
	.WORD 0.,128.,-192.,544.,-96.,96.,0.,64.,0.
	.WORD 32.,0.,96.,-96.,512.,0.,64.,0.
	.WORD -64.,0.,64.,512.,0.,64.,0.,-64.
	.WORD 192.,-192.,-96.
	.WORD 128.,0.,-128.,608.,0.,-160.,160.,64.,0.
	.WORD 128.,0.,-128.,128.,480.,0.,-128.,128.,64.,0.,-64.
	.WORD -96.,0.,160.
	.WORD 0,96.,-96.,416.,-160.,160.,0.,64.,0.
	.WORD 96.,-96.,0,-128.,544.,-96.,96.,0.,64.,0.
	.WORD 0.,64.,128.,-128.,480.,0.,64.,0.
	.WORD -96.,0.,128.,-128.,576.,0.,64.,0.
	.WORD 32.,0.,192.,-192.,544.,0.,64.,0.
	.WORD 64.,0.,-64.,544.,-128.,128.,0.,64.,0.,-64.
	.WORD 64.,0.
	.WORD 160.,-160.,0.,-128.,608.,0.,64.,0.
SLCNTC:	.WORD 80,0,8280,280,0,0,0
	.WORD 0,200,8300,0,8180,180,0,0,0
	.WORD 100,0,180,8180,0,0,0,0
	.WORD 8100,0,100,0,0,0,0,8100
	.WORD 300,8300,80C0
	.WORD 400,0,80CC,0,0,8280,280,100,0
	.WORD 400,0,8400,100,0,0,8200,200,0,0,8100
	.WORD 8180,0,1AA
	.WORD 0,180,8180,0,8280,280,0,100,0
	.WORD 180,8180,0,8400,0,8180,180,0,0,0
	.WORD 0,100,200,8200,0,0,0,0
	.WORD 8155,0,200,8200,0,0,0,0
	.WORD 80,0,300,8300,0,0,0,0
	.WORD 100,0,8080,0,8200,200,0,0,0,8100
	.WORD 0AA,0
	.WORD 280,8280,0,8155,0,0,100,0
IXCNTC: .BYTE 0,0E,20,30,40,46,58,6E
	.BYTE 74,86,9A,0AA,0BA,0CA,0DE,0E2
CTCNTC:	.BYTE 7,9,8,8,3,9,11.,3
	.BYTE 9,10.,8,8,8,10.,2,8
	.PAGE
	.RADIX 10
XNOVA:	.WORD 255,0,-255
	.WORD 255,0,-128,128,0,-255,255,-128
	.WORD 255,0,-255,0,255,0,-255,0,255
	.WORD 255,0,-128,-127,0,255
	.WORD 255,0,-255,0,255,0,-255,0,255
	.WORD 255,0,-255,0,255,0,-128,128,0,-255,0,255
	.WORD 255,0,-128,-127,0,255,0,-255,0,255,0,-255
	.WORD 255,-255,255,0,-127,-128,255,-255,0,255,0,-128,-127
	.WORD 255,-255,128,-128,0,255
	.WORD 255,-255
YNOVA:	.WORD -256,512,-256
	.WORD -256,384,128,128,384,-256,768,128
	.WORD -256,384,256,256,256,384,-256,512,-256
	.WORD 0,256,0,128,768,256
	.WORD 0,256,0,896,-256,512,-256,256,256
	.WORD 0,256,0,640,-256,384,128,0,256,0,256,256
	.WORD 0,384,-128,0,384,0,384,0,128,0,256,0
	.WORD 256,128,256,128,-128,0,128,256,128,-256,384,128,0
	.WORD 256,128,128,128,384,-256
	.WORD 256,256
	.RADIX 16
SLNOVA:	.WORD 8100,0,8100
	.WORD 8100,0,100,100,0,8100,100,100
	.WORD 8100,0,100,0,100,0,8100,100,8100
	.WORD 0,0,0,100,0,100
	.WORD 0,0,0,0,8100,100,8100,100,100
	.WORD 0,0,0,0,8100,100,100,0,0,0,0,100
	.WORD 0,0,8100,0,0,0,0,0,0,0,0,0
	.WORD 100,8100,100,0,8100,0,0,100,0,8100,0,100,0
	.WORD 100,8100,100,100,0,8100
	.WORD 100,100
IXNOVA:	.BYTE 0,0,0,0,6,16,28,34
	.BYTE 46,5E,76,90,9C,0,0,0
CTNOVA:	.BYTE 0,0,0,3,8,9,6,9
	.BYTE 12.,12.,13.,6,2,0,0,0
	.PAGE
	.RADIX 10
XEASY:	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
	.WORD 255
YEASY:	.WORD 0
	.WORD -256
	.WORD 0
	.WORD 256
	.WORD 0
	.WORD 0
	.WORD -256
	.WORD -256
	.WORD 0
	.WORD 256
	.WORD 0
	.WORD 256
	.WORD -256
	.WORD 0
	.WORD 256
	.WORD 0
	.RADIX 16
SLEASY:	.WORD 0
	.WORD 8100
	.WORD 0
	.WORD 100
	.WORD 0
	.WORD 0
	.WORD 8100
	.WORD 8100
	.WORD 0
	.WORD 100
	.WORD 0
	.WORD 100
	.WORD 8100
	.WORD 0
	.WORD 100
	.WORD 0
CTEASY:	.BYTE 1,1,1,1,1,1,1,1
	.BYTE 1,1,1,1,1,1,1,1
IXEASY:	.BYTE 0,2,4,6,8,0A,0C,0E
	.BYTE 10,12,14,16,18,1A,1C,1E
	.PAGE
	.RADIX 10
XBIZR:	.WORD 255
	.WORD 255,-255,255,0,-255
	.WORD 255,-255,255,-255
	.WORD 255
	.WORD 255,0,-255,255
	.WORD 255,-255,0,255
	.WORD 255
	.WORD 255,-255,255,0,-255
	.WORD 255,-255,255,-255
	.WORD 255
	.WORD 255
	.WORD 255,-255,255
	.WORD 255
	.WORD 255,-255,255,-255
	.WORD 255
	.WORD 255
YBIZR:	.WORD 256
	.WORD 0,0,256,512,-256
	.WORD 0,256,256,256
	.WORD 0
	.WORD 0,256,256,256
	.WORD 0,256,512,-256
	.WORD -256
	.WORD 0,0,256,256,0
	.WORD 256,0,256,0
	.WORD 256
	.WORD 0
	.WORD 0,256,0
	.WORD 0
	.WORD 0,0,256,0
	.WORD 0
	.WORD 0
	.RADIX 16
SLBIZR:	.WORD 100
	.WORD 0,0,100,8100,8100
	.WORD 0,0,100,100
	.WORD 0
	.WORD 0,0,100,100
	.WORD 0,100,8100,8100
	.WORD 8100
	.WORD 0,0,100,8100,0
	.WORD 100,8100,100,0
	.WORD 100
	.WORD 0
	.WORD 0,100,0
	.WORD 0
	.WORD 0,0,100,0
	.WORD 0
	.WORD 0
CTBIZR:	.BYTE 1,5,4,1,4,4,1,5
	.BYTE 4,1,1,3,1,4,1,1
IXBIZR:	.BYTE 0,2,0C,14,16,1E,26,28
	.BYTE 32,3A,3C,3E,44,46,4E,50
	.PAGE
	.RADIX 10
XERCT:	.WORD 255
	.WORD 255,-255,255
	.WORD 128,128
	.WORD 255
	.WORD 255,0,-255,255
	.WORD 255,-255,255,-255
	.WORD 255
	.WORD 255
	.WORD 255,0,-255,255,-255,255
	.WORD 255,0,-255,255,-160,160,-255,255,-255,128,128
	.WORD 255,0,-255,0,255,0,-255,0,255
	.WORD 255,0,-255,0,255,0,-255,0,255
	.WORD 255,-255,96,-96,0,128,128,-96,96,0,-255
	.WORD 255,-255,255,-255
	.WORD 255
	.WORD 128,128
YERCT:	.WORD 0
	.WORD 448,0,256
	.WORD 0,192
	.WORD 512
	.WORD 0,-640,0,-448
	.WORD 0,448,448,192
	.WORD -448
	.WORD 0
	.WORD 256,192,256,0,256,0
	.WORD 0,192,0,96,0,160,256,0,448,128,0
	.WORD 0,192,0,96,0,416,-256,832,-448
	.WORD 0,192,0,96,0,128,288,128,-256
	.WORD 0,192,0,96,128,0,-128,-96,0,384,0
	.WORD 0,192,0,384
	.WORD 0
	.WORD 0,-128
	.RADIX 16
SLERCT:	.WORD 0
	.WORD 1C0,0,100
	.WORD 0,180
	.WORD 200
	.WORD 0,0,0,81C0
	.WORD 0,0,1C0,0C0
	.WORD 81C0
	.WORD 0
	.WORD 100,8100,100,0,100,0
	.WORD 0,0,0,0,0,100,8100,0,1C0,100,0
	.WORD 0,0,0,0,0,0,8100,100,81C0
	.WORD 0,0,0,0,0,0,120,0,8100
	.WORD 0,0,0,100,0,0,8100,8100,0,0,0
	.WORD 0,0,0,180
	.WORD 0
	.WORD 0,8100
CTERCT:	.BYTE 1,3,2,1,4,4,1,1
	.BYTE 6,11.,9,9,11.,4,1,2
IXERCT:	.BYTE 0,2,8,0C,0E,16,1E,20
	.BYTE 22,2E,44,56,68,7E,86,88
	.PAGE
	.RADIX 10
XVOLC:	.WORD 255,-255,255,-255,255
	.WORD 255,-255,255,-255,255
	.WORD 255,0,-255,255,0,-255
	.WORD 255,-255,0,255,-255,255,-255,255,-255
	.WORD 255,0,-255,255
	.WORD 255,0,-255,0,255,0,-255,0,255
	.WORD 255,0,-255,0,255,0,-255
	.WORD 255,0,-255,255,-255,255,-255,0,255
	.WORD 255,-255,255,-255,255,-255,255,-255
	.WORD 255,-255
YVOLC:	.WORD -256,256,256,0,256
	.WORD -256,1024,256,0,256
	.WORD 0,256,256,0,768,256
	.WORD 256,0,256,0,768,0,255,255,255
	.WORD 256,512,256,256
	.WORD -256,256,0,256,256,512,-256,512,256
	.WORD 0,256,0,512,256,256,0
	.WORD 0,256,0,256,256,256,0,256,0
	.WORD 256,0,256,0,256,0,256,256
	.WORD 256,256
	.RADIX 16
SLVOLC:	.WORD 8100,100,100,0,100
	.WORD 8100,100,100,0,100
	.WORD 0,0,100,0,0,100
	.WORD 100,0,0,0,0,0,100,100,100
	.WORD 100,8100,100,100
	.WORD 8100,0,0,0,100,8100,8100,100,100
	.WORD 0,0,0,0,100,8100,0
	.WORD 0,0,0,0,100,100,0,0,0
	.WORD 100,8100,100,0,0,0,100,100
	.WORD 100,100
CTVOLC:	.BYTE 0,0,0,5,5,6,9,4
	.BYTE 9,7,9,8,2,0,0,0
IXVOLC:	.BYTE 0,0,0,0,0A,14,20,32
	.BYTE 3A,4C,5A,6C,7C,0,0,0
	.PAGE
	.RADIX 10.
XDIFF:
	.WORD 255
	.WORD 255,-255,255,-255
	.WORD 255,0,-128,-128,0,255,0,-128,-128,255
	.WORD 255,0,-255,0,255,0,-255,0,255
	.WORD 255,-255,255,-64,-192,0,255,0,-255
	.WORD 255,0,-255,255,-255,0,255
	.WORD 255,0,-255,0,255
	.WORD 255,0,-128,-128,0,255
	.WORD 64,192,0,-192,-64,0,255
	.WORD 255,0,-255,0,255
	.WORD 255,0,-64,-192,0,255
	.WORD 255,-255,192,64,0,-255
	.WORD 255,0,-192,-64,0,255
	.WORD 255,0,-128,-128,0,128,128,0,-255
	.WORD 255,-255,64,-64,0,128,128,0,-255
	.WORD 224,-96,-128,0,255
YDIFF:	.WORD 0
	.WORD -256,512,0,-256
	.WORD 0,128,0,-128,256,96,288,-128,0,256
	.WORD 0,128,0,224,-96,128,256,128,0
	.WORD 0,128,224,64,-160,128,256,128,0
	.WORD 0,128,0,256,256,128,0
	.WORD 192,192,-256,640,0
	.WORD 0,192,128,-128,384,0
	.WORD 0,192,192,-192,0,384,0
	.WORD 0,192,0,192,0
	.WORD -256,256,0,192,192,0
	.WORD 0,256,192,0,192,0
	.WORD 0,256,192,0,192,0
	.WORD 256,64,-128,128,256,-128,128,384,0
	.WORD 256,-128,64,0,256,128,-128,384,0
	.WORD 224,96,-128,384,0
	.RADIX 16
SLDIFF:	.WORD 0
	.WORD 8100,100,0,8100
	.WORD 0,0,0,8100,0,55,8055,8100,0,100
	.WORD 0,0,0,0,8055,55,100,8100,0
	.WORD 0,0,0E0,100,80D2,0D2,100,8100,0
	.WORD 0,0,0,100,100,8100,0
	.WORD 0C0,80C0,8100,100,0
	.WORD 0,0,100,8100,100,0
	.WORD 0,100,8100,8100,0,0,0
	.WORD 0,0,0,0,0
	.WORD 8100,100,0,100,8100,0
	.WORD 0,0,100,0,0,0
	.WORD 0,0,100,0,0,0
	.WORD 100,8100,8100,100,8100,8100,100,8100,0
	.WORD 100,8100,100,0,0,100,8100,100,0
	.WORD 100,100,8100,100,0
CTDIFF: .BYTE 1,4,10.,9,9,7,5,6
	.BYTE 7,5,6,6,6,9,9,5
IXDIFF: .BYTE 0,2,0A,1E,30,42,50,5A
	.BYTE 66,74,7E,8A,96,0A2,0B4,0C6
	.PAGE
	.RADIX 10
XSURR:	.WORD 255,0,-255,255,-255,255
	.WORD 255,0,-255,0,255,-255,255
	.WORD 255,-128,128,-255,255,-255,255,-255,255,0,-255
	.WORD 255,-255,255,-255,255,-255
	.WORD 255,0,-255,255,-255,128,-128
	.WORD 255,-255,255,-255,255,-128,128
	.WORD 255,0,-255,255,-255,255
	.WORD 128,-128,255,0,-255,255,-255,255,-255,0,255
	.WORD 255,-255,255,-255,255,0,-255
	.WORD 255,-255,0,255,-255
YSURR:	.WORD -256,768,-512,768,256,256
	.WORD -256,512,512,256,-128,640,256
	.WORD 0,256,0,256,512,128,384,0,256,256,0
	.WORD 0,1280,256,0,256,0
	.WORD -256,1280,-256,-256,1024,256,256
	.WORD 256,512,256,256,512,256,256
	.WORD 0,1280,256,0,256,0
	.WORD 0,-256,0,512,512,128,384,0,256,256,0
	.WORD 256,256,512,128,128,512,256
	.WORD 256,512,256,256,256
	.RADIX 16
SLSURR:	.WORD 8100,0,8200,300,100,100
	.WORD 8100,0,200,0,8080,80,100
	.WORD 0,200,0,8400,200,80,8080,0,100,8100,0
	.WORD 0,0,100,0,100,0
	.WORD 8100,0,8100,8100,100,200,200
	.WORD 100,8100,100,100,8100,200,200
	.WORD 0,0,100,0,100,0
	.WORD 0,8200,0,0,200,80,8080,0,100,8100,0
	.WORD 100,8100,200,80,80,8080,100
	.WORD 100,200,0,100,100
CTSURR:	.BYTE 0,0,0,6,7,11.,6,7
	.BYTE 7,6,11.,7,5,0,0,0
IXSURR:	.BYTE 0,0,0,0,0C,1A,30,3C
	.BYTE 4A,58,64,7A,88,0,0,0
	.PAGE
XDUCA:
YDUCA:
SLDUCA:
CTDUCA:
IXDUCA:
	.PAGE
	.RADIX 10
XFLOT:	.WORD 255,-96,-160,255
	.WORD 255,-255,255,-160,-96
	.WORD 255,-255,255,-96,-32,-32,-96
	.WORD 255,-96,-160,255
	.WORD 255,-255,255,-160,-96
	.WORD 255,-32,-96,128,0,-255,96,32,32,96
	.WORD 255,-255,128,-96,-32
	.WORD 255,0,-255,96,32,32,96,0,-96,-160,255
	.WORD 255,-255,96,160,-255
	.WORD 255
	.WORD 255,0,-255,96,32,32,96
	.WORD 255,0,-255,96,32,32,96
	.WORD 255
	.WORD 255,0,-96,-160,255
	.WORD 255,0,-255,96,32,32,96,-255,96,160,-255
	.WORD 255
YFLOT:	.WORD 0,192,160,0
	.WORD 0,352,0,-160,-192
	.WORD 0,512,0,-96,-64,64,96
	.WORD 0,192,160,0
	.WORD 0,352,0,-160,-192
	.WORD 0,64,96,0,608,0,-96,-64,64,96
	.WORD 0,160,0,-96,-64
	.WORD 0,160,0,-96,-64,64,96,384,192,160,0
	.WORD 0,544,192,160,0
	.WORD 0
	.WORD 0,768,0,-96,-64,64,96
	.WORD 0,160,0,-96,-64,64,96
	.WORD 0
	.WORD 0,256,192,160,0
	.WORD 0,224,0,-96,-64,64,96,32,192,160,0
	.WORD 0
	.RADIX 16
SLFLOT:	.WORD 0,200,100,0
	.WORD 0,0,0,8100,8200
	.WORD 0,0,0,8100,8200,200,100
	.WORD 0,200,100,0
	.WORD 0,0,0,8100,8200
	.WORD 0,200,100,0,0,0,8100,8200,200,100
	.WORD 0,0,0,8100,8200
	.WORD 0,0,0,8100,8200,200,100,0,200,100,0
	.WORD 0,0,200,100,0
	.WORD 0
	.WORD 0,0,0,8100,8200,200,100
	.WORD 0,0,0,8100,8200,200,100
	.WORD 0
	.WORD 0,0,200,100,0
	.WORD 0,0,0,8100,8200,200,100,0,200,100,0
	.WORD 0
CTFLOT:	.BYTE 4,5,7,4,5,10.,5,11.
	.BYTE 5,1,7,7,1,5,11.,1
IXFLOT:	.BYTE 0,8,12,20,28,32,46,50
	.BYTE 66,70,72,80,8E,90,9A,0B0
CKSUM7: .BYTE 2C
	.PAGE
	.SBTTL SHIP TO SHIP COLLISION


SHTOSH:	LDX PLAYUP
	LDA X,APDEAD
	IFEQ
	LDA X,PLADED
	IFNE
	LDX ASHPID
SHTOS2: LDA X,ASDETM
	IFEQ
	JSR FRSTOS
	LDA I,0
	STA TEMP4
	LDA I,2
	STA OGLORY
	JSR TESTOO
	LDA TEMP4
	IFNE
	JMP EXPLYR
	THEN
	THEN
	THEN
	THEN
	RTS
	
EXPLYR: JSR LAEXCO
	JSR STREXP
	JSR EXPLOS
	RTS
SHTOPA: LDX I,3
	JSR SHTOS2
	LDX I,2
	JSR SHTOS2
	RTS
	.PAGE
	.SBTTL PLAYER SHOTS VS ALIEN SHIPS


CDEVSP: 
	LDA I,PSHOTS-1
	STA TEMP1
	LDY PLAYUP
	LDA Y,APDEAD
	IFEQ
	BEGIN
	LDY TEMP1
	LDA Y,SHACTM
	IFNE
	LDX I,1
	BEGIN
	STX TEMP2
	JSR TSTONE
	LDX TEMP2
	DEX
	MIEND
	THEN
	DEC TEMP1
	MIEND
	THEN
	RTS

TSTONE: LDA X,ASDETM
	IFEQ
	LDA I,2
	STA OGLORY
	 JSR LODLSH
TESTOO: LDA X,ASCPVL
	STA POINT5
	LDA X,ASCPVH
	STA POINT6
	LDA X,ASCPHL
	STA POINT7
	LDA X,ASCPHH
	STA POINT8
	STX TEMP2
	JSR COLTST
	LDX TEMP2
	LDY TEMP1
	IFCC
	INC TEMP4
	JSR DEASHP
	THEN
	THEN
	RTS
CDASHP: LDY I,PSHOTS-1
	STY TEMP1
	BEGIN
	LDY TEMP1
	LDA Y,SHACTM
	IFNE
	LDX ASHPID
	JSR TSTONE
	THEN
	DEC TEMP1
	MIEND
	RTS

DEASHP: LDA RANDOM
	ORA I,40
	CPX I,2
	IFCS
	LDA I,30
	THEN
	STA X,ASDETM
	LDA I,0
	STA Y,SHACTM
	JSR LASHCO
	JSR STREXP
	JSR EXPLOS
	LDA I,0
	STA TEMP3
	LDA I,1
	STA TEMP4
	JMP AWDPTS
	
CDPVSP: 
	LDA I,PSHOTS-1
	STA TEMP1
	BEGIN
	LDY TEMP1
	LDA Y,SHACTM
	IFNE
	LDX I,3
	BEGIN
	STX TEMP2
	JSR TSTONE
	LDX TEMP2
	DEX
	CPX I,1
	EQEND
	THEN
	DEC TEMP1
	MIEND
	RTS
LASHCO: LDA X,ASCPVL
	STA POINT1
	LDA X,ASCPVH
	STA POINT2
	LDA X,ASCPHL
	STA POINT3
	LDA X,ASCPHH
	STA POINT4
	RTS
	.PAGE
	.SBTTL TEST COLLISION SHIP VS ENEMY SHOTS


CDPVSE:	JSR	LODCOR
	LDX	I,ASHOTS+3
	BEGIN
	LDA	X,BSACTM
	IFNE
	STX TEMP1
	JSR LSCRD
	LDA	I,0
	STA	OGLORY
	JSR	COLTST
	IFCC
	LDA TRSTAT
	BNE ABSORB
	LDA SWITCH
	AND I,MTRCTR
	IFNE
ABSORB: JSR SHIELD
	ELSE
	JSR LAEXCO
	JSR STREXP
	JSR EXPLOS
	THEN
	THEN
	LDX	TEMP1
	THEN
	DEX
	MIEND
	RTS

LSCRD:	LDX TEMP1
	LDA	X,BSCPVL
	STA 	POINT1
	LDA	X,BSCPVH
	STA	POINT2
	LDA	X,BSCPHL
	STA	POINT3
	LDA	X,BSCPHH
	STA	POINT4
	RTS
SHIELD: LDA I,70
	ADC FUESED
	STA FUESED
	LDX TEMP1
	LDA I,0
	STA X,BSACTM
	RTS
	.PAGE
	.SBTTL	COLLISION-SHIP SHOTS VS BASES




PSVSEB:	LDA	I,PSHOTS-1
	STA	TEMP1
	BEGIN
	LDY	TEMP1
	LDA	AY,SHACTM
	IFNE
	LDX	I,7
	BEGIN
	LDA	AX,BSTAT
	IFNE
	JSR	LODLSH
	JSR	LODBAS
	STX	TEMP2
	LDA	I,0FF
	STA	OGLORY
	JSR	COLTST
	LDX	TEMP2
	LDY TEMP1
	IFCC
	JSR	DEABAS
	THEN
	LDX TEMP2
	THEN
	DEX
	MIEND
	THEN
	DEC	TEMP1
	MIEND
	RTS
SIOSVL:	.BYTE	-20,20,-20,-30,-20,-20,20,-20
DUOSVL: .BYTE 20,-20,20,20,-20,20,20,20
CTOSVL: .BYTE 20,-20,20,-20,20,-20,20,-20
NIOSVL: .BYTE -20,20,10,20,10,10,-20,20


SIOSHL: .BYTE   -32.,20,-32.,20,-20,20,32.,32.
DUOSHL: .BYTE -20,20,0,0,-20,0,20,0
CTOSHL: .BYTE 0,0,0,0,0,0,0,0
NIOSHL: .BYTE 10,10,-10,0,20,-10,0,-10
EAOSVL:	.BYTE -20,-20,-20,-20,-20,-20,-20,-20
EAOSHL:	.BYTE 0E0,0,0E0,0E0,20,20,-20,0

EROSVL: .BYTE -20,-20,-20,20,20,20,-20,20
EROSHL: .BYTE 20,20,-20,-20,20,-20,-20,20
BZOSVL: .BYTE 20,-20,-20,20,-20,-20,20,20
BZOSHL: .BYTE -20,-20,20,20,-20,0,20,-20

VLOSVL:	.BYTE 20,20,20,-20,-20,-20,-20,-20
VLOSHL:	.BYTE -20,-20,20,-20,20,20,-20,20
NOOSVL: .BYTE -10,10,-10,-10,-10,10,10,10
NOOSHL: .BYTE -10,-10,-10,0,-10,0,10,10
DCOSVL:
DCOSHL:
FLOSVL:	.BYTE 20,-20,20,20,20,20,20,20
FLOSHL:	.BYTE 20,0,-20,20,-20,-20,20,20
SUOSVL:	.BYTE 20,-20,20,-20,-20,20,20,20
SUOSHL:	.BYTE -20,-20,20,20,-20,-20,-20,20
DFOSVL:	.BYTE 20,20,20,-20,20,20,-20,20
DFOSHL:	.BYTE -20,20,20,20,20,20,-20,20
	.PAGE
	.SBTTL	COLLISION SHOTS VS. REACTOR

CDREAC:	LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,20
	IFNE
	LDA I,MESTIM
	ORA MSGBT3
	STA MSGBT3
	LDA I,PSHOTS-1
	STA TEMP1
	BEGIN
	LDY TEMP1
	LDA Y,SHACTM
	IFNE
	JSR LODLSH
	JSR LODREA
	LDA I,3
	STA OGLORY
	LDA I,0
	STA TEMP2
	JSR COLTST
	LDY TEMP1
	IFCC
	JMP MLTDWN
	THEN
	THEN
	DEC TEMP1
	MIEND
	THEN
	RTS

LODREA:	LDA I,RECPVL
	STA POINT5
	LDA I,RECPVH
	STA POINT6
	LDA I,RECPHL
	STA POINT7
	LDA I,RECPHH
	STA POINT8
	RTS
MLTDWN:
	LDA RACTVE
	IFMI
	JSR REOUSN
	LDA I,0
	STA RACTVE
	LDA I,20
	STA ASDETM
	STA ASDETM+1
	LDA I,0
	STA Y,SHACTM
	STA TEMP3
	LDA I,5
	STA TEMP4
	JSR AWDPTS
	LDX PLAYUP
	LDA X,SSFLAG
	CMP I,1
	IFEQ
	LDA I,-1
	STA TEMP1
	JSR IBSTAT
	THEN
	THEN
	RTS

UPAPTM:	LDA APTIME
	IFPL
	LDA FRAME
	AND I,3F
	IFEQ
	SED
	LDA APTIME
	SEC
	SBC I,1
	STA APTIME
	CLD
	IFMI
	DEC APTIME
	LDX PLAYUP
	LDA X,CRPLNT
	ASL
	ADC PLAYUP
	TAY
	LDA I,-1
	STA Y,SIRNXR
	LDY X,CRPLNT
	JSR PLACOR
	JSR STREXP
	JSR STREXP
	JSR STREXP
	JSR EXPLOS
	JSR CLRSHT
	LDX PLAYUP
	LDA I,80
	STA LSCALE
	LDA I,0
	STA X,PLADED
	LDA I,CDPSPA
	STA X,STATE
	STA X,APDEAD
	THEN
	THEN
	THEN
	RTS
	.PAGE
; INPUTS:	X= INDEX INTO BASE ARRAY
; 
; OUTPUTS: 	POINT5-8 LOADED WITH CENTER OF BASE COORDS

LODBAS: TXA
	TAY
	LDA NY,BAOSVL
	STA DIFF1
	IFMI
	LDA I,0FF
	ELSE
	LDA I,0
	THEN
	STA DIFF2
	LDA	Y,BACPVL
	CLC
	ADC DIFF1
	STA	POINT5
	LDA	Y,BACPVH
	ADC DIFF2
	STA	POINT6
	LDA NY,BAOSHL
	STA DIFF1
	IFMI
	LDA I,0FF
	ELSE
	LDA I,0
	THEN
	STA DIFF2
	LDA	Y,BACPHL
	CLC
	ADC DIFF1
	STA	POINT7
	LDA	Y,BACPHH
	ADC DIFF2
	STA	POINT8
	RTS


; INPUTS: Y= INDEX INTO SHOT ARRAY
; OUTPUTS: POINT1-4 LOADED WITH LANDER SHOT COORDS


LODLSH:	LDA	Y,SHCPVL
	STA	POINT1
	LDA	Y,SHCPVH
	STA	POINT2
	LDA	Y,SHCPHL
	STA	POINT3
	LDA	Y,SHCPHH
	STA	POINT4
	RTS

	.PAGE
	.SBTTL TRACTOR BEAM
;INPUTS: TRACTV: TASK ACTIVE FLAG
;	 ONTIME: TIMER FOR DEPOSIT ON
;	 OFTIME:    "   "    "     OFF
;	 SECTOR: RESIDENT SECTOR OF LANDER
;	 FSTAT:  DEPOSIT STATUS BYTE
;
;OUTPUTS:
;
;
TRACTR: LDA I,0
	STA SPRKLE
	STA TRSTAT
	LDX PLAYUP
	LDA X,PLADED
	IFNE
	LDA SWITCH
	AND I,MTRCTR
	IFNE
ATRACK:	LDX PLAYUP
	LDA X,CRPLNT
	CMP I,3
	IFEQ
	LDA LACPVH
	IFMI
	JMP FLTRCT
	THEN
	THEN
	LDA LANGLE
	CMP I,20
	IFCS
	EOR I,3F
	THEN
	CMP I,4
SPCAS1: LDA I,-1
	STA TRSTAT
	JSR RNGECK
	IFCC
	LDA I,1
	STA SPRKLE
	LDX SECTOR
	DEC X,FSTAT
	IFEQ
	JMP AWDFUE
	THEN
	THEN
	THEN
	THEN
	RTS

FLTRCT: LDA LANGLE
	CMP I,20
	IFCS
	EOR I,3F
	THEN
	CMP I,1C 
	JMP SPCAS1
	RTS


ATRCTR: LDA I,0
	STA SPRKLE
	STA TRSTAT
	LDA LACPVH
	BEQ TRACOK
	IFMI
TRACOK: LDX SECTOR
	LDA X,FSTAT
	IFNE
	LDA LSCALE
	IFEQ
	JMP ATRACK
	THEN
	THEN
	THEN
	RTS

AWDFUE: LDA ATRAFL
	IFNE
	SED
	LDY PLAYUP
	LDA I,0
	CLC
	ADC Y,FUEL1
	STA Y,FUEL1
	LDA Y,FUEL2
	ADC I,25
	STA Y,FUEL2
	LDA Y,FUEL3
	ADC I,0
	STA Y,FUEL3
	CMP I,2
	IFCS
	LDA Y,FUEL2
	CMP I,50
	IFCS
	LDA I,50
	STA Y,FUEL2
	LDA I,0
	STA Y,FUEL1
	THEN
	THEN
	CLD
	JMP EXTLIF
	THEN
	RTS
	.PAGE

DSBEND: LDX ASHPID
	LDA X,ASDETM
	IFNE
	LDX I,NEXPLO*DOTS-1
	LDA I,0
	BEGIN
	ORA X,EXTIME
	DEX
	MIEND
	TAX
	IFEQ
	LDX I,5
	BEGIN
	LDA X,SAVCOR
	STA X,LACPVF
	DEX
	MIEND
	LDA I,0FF
	STA LSCALE
	JSR CLRSHT
	LDX PLAYUP
	LDA I,CEXPN2
	STA X,STATE
	THEN
	THEN
	RTS


CKDONE: LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA LACPVH
	IFMI
	LDA X,NVEXIT
	CMP LACPVH
	ELSE
	CMP X,PVEXIT
	THEN
	LDY PLAYUP
	IFCS
	LDA I,CENVYG
	STA Y,STATE
	LDA X,PLANID
	CMP I,0A8
	IFNE
	JMP AWDBON
	ELSE
	LDA RACTVE
	IFPL
	JMP AWDBON
	ELSE
	JMP REMBON
	THEN
	THEN
	THEN
	LDA LACPHH
	IFMI
	LDA I,0
	SEC
	SBC LACPHH
	SEC
	SBC I,1
	THEN
	CMP X,HEXIT
	IFCS
	LDA I,CENVYG
	STA Y,STATE
	JMP AWDBON
	THEN
	RTS
PVEXIT:	.BYTE 5,5,5,5,3,5,5,5
	.BYTE 4,3,5,5,4,5,3
NVEXIT:	.BYTE -5,-5,-5,-6,-5,-6,-6,-6
	.BYTE -6,-6,-5,-5,-6,-5,-6
HEXIT:	.BYTE 6,6,6,6,8,8,8,8
	.BYTE 8,8,8,8,8,8,8
AWDBON: LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	CMP I,0A8
	BEQ CHEAT
	LDA I,0
	LDX I,7
	BEGIN
	ORA X,BSTAT
	DEX
	MIEND
	TAX
	IFEQ
CHEAT:	LDX PLAYUP
	LDA X,PLBONS
	LDY I,0
	STY TEMP3
	STY X,PLBONS
	STA TEMP4
	JSR AWDPTS
	LDX PLAYUP
	LDA X,FIRPLA
	IFEQ
	INC X,FIRPLA
	LDA X,CRPLNT
	IFNE
	TAY
	LDA Y,SKPBON
	STA DIFF4
	LDA I,10
	STA TEMP4
	BEGIN
	JSR AWDPTS
	DEC DIFF4
	MIEND
	THEN
	THEN
	ELSE
REMBON:	LDX PLAYUP
	LDA X,PLBONS
	PHA
	LDA X,CRPLNT
	ASL
	CLC
	ADC PLAYUP
	TAX
	PLA
	STA X,SAVBON
	THEN
	RTS


SKPBON:	.BYTE 0,1,5,0B,13
CKENDW: LDX I,NEXPLO*DOTS-1
	LDA I,0
	BEGIN
	ORA X,EXTIME
	DEX
	MIEND
	LDX PLAYUP
	ORA X,PLADED
	IFEQ
	LDX PLAYUP
	LDA X,STATE
	CMP I,CPLAY
	IFEQ
	JSR SAVBAS
	JSR SAVFUE
	LDA I,CDIED2
	ELSE
	LDA I,CDIED
	THEN
	LDX PLAYUP
	STA X,STATE
	LDA I,-1
	STA LSCALE
	THEN
	RTS
	.PAGE
	.SBTTL CHECK SHIP IN PLANETS RANGE


PLANCK:
ATPLCK:
	LDX PLAYUP
	LDA X,SSFLAG
	AND I,3
	TAX
	LDA X,SSINDX
	TAX
	LDA I,4
	STA TEMP4
	BEGIN
	LDY PLAYUP
	TXA
	ASL
	ADC PLAYUP
	TAY
	LDA Y,SIRNXR
	IFMI
	JMP SKIP3
	THEN
	JSR GEPLCK
SKIP3:	DEX
	DEC TEMP4
	MIEND
	JMP STARCK

PLCPVH: .BYTE 1,0FE,0FD,1,0,1,0FF,0FD
	.BYTE -1,1,1,-2,-3,1,0,0,0
PLCPVL:	.BYTE 0F4,70,0BC,0C2,37,0C2,9C,0C0
	.BYTE 40,0C0,0F4,070,0BC,0C2,37,0C8,0C8
PLCPHL:	.BYTE 40,66,0A8,60,0A8,0CE,58,14
	.BYTE 0D0,60,40,66,0A8,60,0A8,96,20
PLCPHH: .BYTE  2,2,0FD,0FE,0FD,0FF,2,0
	.BYTE 0FD,2,2,2,0FD,0FE,0FD,0,0FF
PLSIZE:	.BYTE 50,50,50,50,50,50,50,50
	.BYTE 50,50,50,50,50,50,50,20,20
PLANID:	.BYTE 0,0,0,98,0A8,8,0,0
	.BYTE 88,0A8,0,0,98,0,0A8,40,40
SSINDX:	.BYTE 4,9,0E
STARCK:	LDX PLAYUP
	LDA X,SSFLAG
	AND I,1
	IFNE
	LDX I,10
	ELSE
	LDX I,0F
	THEN
GEPLCK:	LDA LACPHL
	SEC
	SBC X,PLCPHL
	STA POINT1
	LDA LACPHH
	SBC X,PLCPHH
	IFMI
	EOR I,0FF
	PHA
	LDA POINT1
	EOR I,0FF
	STA POINT1
	PLA
	THEN
	STA POINT2
	LDA LACPVL
	SEC
	SBC X,PLCPVL
	STA POINT3
	LDA LACPVH
	SBC X,PLCPVH
	IFMI
	EOR I,0FF
	PHA
	LDA POINT3
	EOR I,0FF
	STA POINT3
	PLA
	THEN
	STA POINT4
	IFEQ
	LDA POINT3
	CMP X,PLSIZE
	IFCC
	LDA POINT2
	IFEQ
	LDA POINT1
	CMP X,PLSIZE
	IFCC
	LDA X,PLANID
	AND I,40
	IFNE
	JSR LAEXCO
	JSR STREXP
	JSR EXPLOS
	ELSE
	LDY PLAYUP
	LDA X,PLANID
	IFMI
	AND I,20
	IFNE
	LDA Y,APDEAD
	IFNE
	RTS
	THEN
	THEN
	THEN
	STX Y,CRPLNT
	JSR INPNTR
	LDA I,CNWVYG
	LDX PLAYUP
	STA X,STATE
	THEN
	THEN
	LDX I,0
	THEN
	THEN
	THEN
	RTS
PLACOR: LDA Y,PLCPVL
	STA POINT1
	LDA Y,PLCPVH
	STA POINT2
	LDA Y,PLCPHL
	STA POINT3
	LDA Y,PLCPHH
	STA POINT4
	RTS
	.PAGE


SBTEST: LDY PLAYUP
	LDA Y,APDEAD
	IFEQ
	LDX I,1
	BEGIN
	LDA X,ASDETM
	IFEQ
	JSR LODCOR
	JSR LASCOR
	JSR TSTCOL
	LDA RNGFLG
	IFNE
	STX ASHPID
	LDX I,5
	BEGIN
	LDA I,0
	LDA X,LACPVF
	STA X,SAVCOR
	DEX
	MIEND
	JSR INIPOS
	JSR CLRSHT
	LDY PLAYUP
	LDA I,CDSBTL
	STA Y,STATE
	JSR INISOU
	JSR DPSPSN
	PLA
	PLA
	LDX I,0
	THEN
	THEN
	DEX
	MIEND
	THEN
	RTS

TSTCOL: LDA I,0
	STA RNGFLG
	LDA POINT1
	SEC
	SBC POINT5
	STA DIFF1
	LDA POINT2
	SBC POINT6
	IFMI
	EOR I,0FF
	PHA
	LDA DIFF1
	EOR I,0FF
	STA DIFF1
	PLA
	THEN
	STA DIFF2
	LDA POINT3
	SEC
	SBC POINT7
	STA DIFF3
	LDA POINT4
	SBC POINT8
	IFMI
	EOR I,0FF
	PHA
	LDA DIFF3
	EOR I,0FF
	STA DIFF3
	PLA
	THEN
	STA DIFF4
	IFEQ
	LDA DIFF3
	CMP I,50
	IFCC
	LDA DIFF2
	IFEQ
	LDA DIFF1
	CMP I,50
	IFCC
	LDA I,-1 
	STA RNGFLG
	THEN 
	THEN
	THEN
	THEN
	RTS



LASCOR: LDA X,ASCPVL
	STA POINT1
	LDA X,ASCPVH
	STA POINT2
	LDA X,ASCPHL
	STA POINT3
	LDA X,ASCPHH
	STA POINT4
	RTS
INIPOS: LDX ASHPID
	LDA X,ASCPVH
	CMP LACPVH
	IFEQ
	LDA X,ASCPVL
	CMP LACPVL
	THEN
	IFCS
	LDA I,0FE
	ELSE
	LDA I,1
	THEN
	STA LACPVH
	EOR I,0FF
	STA X,ASCPVH
	LDA X,ASCPHH
	CMP LACPHH
	IFEQ
	LDA X,ASCPHL
	CMP LACPHL
	THEN
	IFCS
	LDA I,0FE
	ELSE
	LDA I,1
	THEN
	STA LACPHH
	EOR I,0FF
	STA X,ASCPHH
	RTS

	
	
	.PAGE
	.SBTTL TRACTOR BEAM RANGE CHECK


RNGECK: LDY SECTOR
	LDA Y,FSTAT
	SEC
	IFEQ
	RTS
	THEN
	CLC
	LDA I,10
	ADC XACL2
	IFCS
	INC XACH2
	CLC
	THEN
	ADC NY,FHOS
	STA XACL2
	LDA XACH2
	ADC I,0
	STA XACH2
	LDA I,0
	STA TEMP2
	LDA NY,FVOS
	STA TEMP1
	LDX I,3
	BEGIN
	ASL TEMP1
	ROL TEMP2
	DEX
	MIEND
	LDA TEMP2
	CMP I,8
	IFCS
	ORA I,0F0
	STA TEMP2
	THEN
	LDA YACL2
	CLC
	ADC TEMP1
	STA YACL2
	LDA YACH2
	ADC TEMP2
	STA YACH2
	LDA LACPHL
	SEC
	SBC XACL2
	STA TEMP1
	LDA LACPHH
	SBC XACH2
	IFMI
	EOR I,0FF
	STA TEMP2
	LDA TEMP1
	EOR I,0FF
	STA TEMP1
	LDA TEMP2
	THEN
	IFNE
	SEC
	ELSE
	LDA TEMP1
	CMP I,HFRANG
	IFCC
	LDA LACPVL
	SEC
	SBC YACL2
	STA TEMP3
	LDA LACPVH
	SBC YACH2
	IFMI
	EOR I,0FF
	STA TEMP4
	LDA TEMP3
	EOR I,0FF
	STA TEMP3
	LDA TEMP4
	THEN
	IFNE
	SEC
	ELSE
	LDA TEMP3
	CMP I,VFRANG
	THEN
	THEN
	THEN
	RTS
	.PAGE
; INPUTS: X= INDEX INTO BASE ARRAY
; 
; OUTPUTS: Y=  "    "     "    "
; 
; OUTPUTS: TIMER FOR BASE DEACTIVATION SET
; 	   SHOT SLOT CLEARED FOR REFIRING


DEABAS:	LDA	I,0
	STA	X,BSTAT
	STA	Y,SHACTM
	JSR LODLSH
	JSR STREXP
	JSR EXPLOS
	LDX I,6
	LDA BSTAT+7
	BEGIN
	ORA X,BSTAT
	DEX
	MIEND
	TAX
	IFEQ
	JSR MICOSN
	THEN
	LDA I,50
	STA TEMP3
	LDA I,2
	STA TEMP4
AWDPTS: LDA ATRAFL
	IFNE
	 SED
	CLC
	LDX PLAYUP
	LDA TEMP3
	ADC X,SCORE1
	STA X,SCORE1
	LDA TEMP4
	ADC X,SCORE2
	STA X,SCORE2
	LDA X,SCORE3
	ADC I,0
	STA X,SCORE3
	JSR CKBOLF
	CLD
	THEN
	RTS

CKBOLF: LDA OPTSW1
	AND I,0C0
	CMP I,0C0
	IFNE
	LDA X,SCORE3
	CMP X,BSCOR3
	IFCS
	LDA X,SCORE2
	CMP X,BSCOR2
	IFCS
	INC X,LIVES
	JSR SAUCSN
	LDA OPTSW1
	ASL
	ROL
	ROL
	AND I,3
	TAY
	LDA X,BSCOR3
	CLC
	ADC Y,BOLEVL
	STA X,BSCOR3
	THEN
	THEN
	THEN
	RTS
BOLEVL: .BYTE 1,2,3
UPASTM:
	LDX PLAYUP
	LDA X,STATE
	CMP I,CPLAY
	IFEQ
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,8
	IFNE
	RTS
	THEN
	THEN
	LDA FRAME
	AND I,1
	IFEQ
	LDX I,3
	BEGIN
	LDA X,ASDETM
	IFNE
	DEC X,ASDETM
	IFEQ
	CPX I,2
	IFCC
	LDY PLAYUP
	LDA Y,APDEAD
	IFEQ
	LDA Y,SSFLAG
	AND I,1
	IFEQ
	JSR INITEM
	ELSE
	JSR INITM3
	THEN
	THEN
	ELSE
	JSR INITM2
	THEN
	JSR SETVEL
	THEN
	THEN
	DEX
	MIEND
	THEN
	RTS
INITM2:	LDA I,0F8
	STA X,ASCPHH
	STX TEMP1
	LDX PLAYUP
	LDA I,3
	LDX TEMP1
	STA X,ASCPVH
	LDA RANDOM
	STA X,ASCPHL
	STA X,ASCPVL
	RTS
CKSUM8: .BYTE 3
	.PAGE
	.SBTTL	PLAYER FIRE
; INPUTS:	SWSTAT:	SWITCH INPUTS
; OUTPUTS:	SHOT POSITION AND VELOCITY ARRAYS UPDATED
;		SWSTAT CLEARED - IF PRESSED
;		A,X,Y UPDATED

PLFIRE:	LDX LASFIR
	LDA SWITCH
	AND I,MFIRE
	STA LASFIR
	IFEQ
	RTS
	THEN
	TXA
	AND I,MFIRE
	IFNE
	RTS
	THEN
	LDA SWITCH
	AND I,MTRCTR
	IFNE
	RTS
	THEN
ATFIRE:	LDX I,PSHOTS-1
	BEGIN
	LDA X,SHACTM		;FIND OPEN SLOT
	IFNE
	JMP SKIP1
	THEN
	JSR PL0FIR
	LDA LACPVH		;PUT LANDER POSITION
	STA X,SHCPVH		;INTO CURRENT SHOT POSITION
	LDA LACPVL
	STA X,SHCPVL
	LDA LACPHH
	STA X,SHCPHH
	LDA LACPHL
	STA X,SHCPHL
	LDA I,0
	STA X,SHCPHF		;0 FRACTIONAL PORTIONS
	STA X,SHCPVF
	LDY PLAYUP
	LDA Y,STATE
	CMP I,CDPSPA
	IFEQ
	LDA I,0E
	ELSE
	LDA I,38
	THEN
	STA X,SHACTM		;SET ACTIVE TIMER
	LDY LANGLE
	LDA AY,SHVEFV		;TAKE SHOT VELOCITIES, AND IN
	CLC
	ADC	LAVEVF
	STA X,SHVEVF
	LDA AY,SHVELV
	ADC LAVEVL
	STA X,SHVEVL
	LDA AY,SHVHF
	CLC
	ADC	LAVEHF
	STA X,SHVEHF
	LDA AY,SHVHL
	ADC	LAVEHL
	STA X,SHVEHL
	LDY I,0FF		;USE LO BYTE VELOCITY TO
	LDA X,SHVEVL		;SET SIGN OF HIGH BYTE
	IFMI
	TYA
	STA X,SHVEVH
	ELSE
	INY
	TYA
	STA X,SHVEVH
	DEY
	THEN
	LDA X,SHVEHL
	IFMI
	TYA
	STA X,SHVEHH
	ELSE
	INY
	TYA
	STA X,SHVEHH
	THEN
	LDX I,0
SKIP1: 	DEX
	MIEND
	RTS
ATPLFR: LDA ATRCTL
	AND I,1
	IFNE
	JMP ATFIRE
	THEN
	RTS
	.PAGE
	.SBTTL 	CONTROL BASE FIRING
; INPUTS: ZOOMST: STATUS OF ZOOM TASK
; DBFIR:  SHOT DELAY TIMER
; BSACTM: SHOT ACTIVE TIMER
;
;OUTPUTS: DBFIRE- UPDATED
;JUMP TO SHOOT IF OK TO FIRE

BAFIRE:	LDA	ZOOMST	; CANT FIRE IF ZOOMING TRANSITION
	IFEQ
	LDA	RANDOM
	LDX PLAYUP
	CMP X,SHOTPR
	IFCC
	LDA X,CRPLNT
	CMP I,3
	IFEQ
	JMP NIMIFR
	THEN
	LDA	RANDOM ; RANDOMLY CHOOSE ANY OF THE 
	IFMI
	SEC
	ELSE
	CLC
	THEN
	AND	I,3	; EIGHT BASES
	ADC 	SECTOR
	TAX
	DEX
	TXA
	LSR
	AND	I,7
	TAY
	LDA	I,7
	STA	TEMP1
	BEGIN
	LDA	Y,BSTAT
	IFNE
	LDX	NBULET
	BEGIN		; LOOP FOR ALL BASES
	LDA	X,BSACTM	; SHOT ACTIVE
	IFEQ
	LDA I,3
	STA Y,BFSTAT
	JMP SHOOT
	THEN
	DEX
	MIEND
	ELSE
	DEY
	IFMI
	LDY	I,7
	THEN
	THEN
	DEC	TEMP1
	MIEND
	THEN
	THEN
	RTS


	.PAGE
NIMIFR:	LDX I,0
	LDA LACPVH
	IFMI
	INX
	THEN
	LDA LACPHH
	IFMI
	INX
	INX
	THEN
	TXA
	ASL
	STA TEMP1
	LDA FRAME
	AND I,1
	CLC
	ADC TEMP1
	TAY
	LDA Y,NIFIRX
	TAY
	LDA I,7
	STA TEMP1
	BEGIN
	LDA Y,BSTAT
	IFNE
	LDX NBULET
	BEGIN
	LDA X,BSACTM
	IFEQ
	LDA I,3
	STA Y,BFSTAT
	JMP SHOOT
	THEN
	DEX
	MIEND
	ELSE
	DEY
	IFMI
	LDY I,7
	THEN
	THEN
	DEC TEMP1
	MIEND
	RTS

NIFIRX:	.BYTE 6,7,5,7,0,4,1,3
	.PAGE
	.SBTTL ALIEN SHIPS FIRE



ASSCTL: LDX PLAYUP
	LDA X,APDEAD
	IFEQ
	LDX I,1
	BEGIN
	JSR ONESHT
	DEX
	MIEND
	THEN
	RTS

ONESHT:
	LDY PLAYUP
	LDA Y,PLADED
	IFNE
	LDA X,ASDETM
	IFEQ
	LDA X,ESHTIM
	IFEQ
	LDA PLAYUP
	IFEQ
	LDY WAVENO
	ELSE
	LDY WAVENO+1
	THEN
	LDA RANDOM
	CMP Y,ASHPRO
	IFCC
	JMP ASHOOT
	THEN
	THEN
	THEN
	THEN
	RTS

ASHPRO: .BYTE 8,10,20,40,50,60,70,80


ASHOOT: STX TEMP1
	LDA X,ASCPVL
	STA X,ESCPVL
	STA POINT1
	LDA X,ASCPVH
	STA X,ESCPVH
	STA POINT2
	LDA X,ASCPHL
	STA X,ESCPHL
	STA POINT3
	LDA X,ASCPHH
	STA X,ESCPHH
	STA POINT4
	JSR LODCOR
	JSR ABSDIF
	LDA ASQUAD
	ASL
	TAY
	LDA POINT1
	SEC
	SBC POINT3
	LDA POINT2
	SBC POINT4
	IFMI
	INY
	THEN
	LDA Y,ANGTBL
	STA TEMP2
	LDA RANDOM
	AND I,7
	CLC
	ADC TEMP2
	TAY
	LDX TEMP1
	LDA Y,SHVHF
	STA X,ESHVHF
	LDA Y,SHVHL
	STA X,ESHVHL
	LDA Y,SHVEFV
	STA X,ESHVVF
	LDA Y,SHVELV
	STA X,ESHVVL
	PHA
	LDY I,0FF
	PLA
	IFMI
	TYA
	ELSE
	INY
	TYA
	DEY
	THEN
	STA X,ESHVVH
	LDA X,ESHVHL
	IFMI
	TYA
	ELSE
	INY
	TYA
	THEN
	STA X,ESHVHH
	LDA PLAYUP
	IFEQ
	LDA STATE
	ELSE
	LDA STATE+1
	THEN
	CMP I,CDPSPA
	IFCS
	CMP I,CDSBTL
	IFEQ
	LDA I,30
	ELSE
	LDA I,0A
	THEN
	ELSE
	LDA PLAYUP
	IFEQ
	LDY CRPLNT
	ELSE
	LDY CRPLNT+1
	THEN
	LDA Y,SHPRNG
	THEN
	STA X,ESHTIM
	JSR PL1FIR
	RTS
	
ANGTBL: .BYTE 20,28,38,30,10,18,0,8
SHPRNG:	.BYTE 28,28,1C,0,0,8,18,28,0
	.PAGE
	.SBTTL SHOOT FROM A BASE
; INPUTS: X= INDEX OF SHOT SLOT
; 	Y=     "   "  BASE
; OUTPUTS: POSITION AND VELOCTIY ARRAYS SET UP

SHOOT: 	LDA	I,0
	STA	X,BSCPVF
	STA	X,BSCPHF	; ZERO FRACTIONAL PORTIONS
	LDA	AY,BACPVL
	STA	X,BSCPVL
	LDA 	AY,BACPVH
	STA	X,BSCPVH
	LDA	AY,BACPHL
	STA	X,BSCPHL
	LDA	AY,BACPHH
	STA	X,BSCPHH
	LDA	RANDOM
	IFMI
	TYA
	CLC
	ADC I,8
	TAY
	THEN
	LDA	NY,SHRANG
	STA	X,BSACTM
	LDA 	NY,MNANGL
	STA	TEMP1
	LDA	RANDOM
	AND	NY,ANGLMA
	CLC
	ADC	TEMP1
	AND	I,3F
	TAY
	LDA	AY,SHVHF	;SETUP SHT VELOCITIES
	STA	X,BSVEHF
	LDA	AY,SHVHL
	STA	X,BSVEHL
	LDA	AY,SHVEFV
	STA	X,BSVEVF
	LDA	AY,SHVELV
	STA	X,BSVEVL
	PHA
	LDY	I,0FF
	PLA
	IFMI
	TYA
	ELSE
	INY
	TYA
	DEY
	THEN
	STA X,BSVEVH
	LDA	X,BSVEHL
	IFMI
	TYA
	ELSE
	INY
	TYA
	THEN
	STA X,BSVEHH
	JSR PL1FIR
	RTS


	.PAGE
	.SBTTL	UPDATE SHOT POSITIONS

; INPUTS:	SHVEVI,SHVEHI=SHOT V VELOCITIES
;		SHVEHI,SHVEHF=SHOT V VELOCITIES
;
;		SHCPH=CURRENT SHOT POSITION
;
; OUTPUTS:	SHOT POSITION ARRAY UPDATED
;		SHOT ACTIVE TIMER UPDATED
;		DEACTIVATE SHOT IF TIME OUT




UPSHOP:	LDX I,ASHOTS+PSHOTS+1
	BEGIN
	LDA X,SHACTM
	IFNE
	LDA X,SHCPVF		;ADD IN FRACTIONAL DELTA
	CLC
	ADC X,SHVEVF
	STA X,SHCPVF
	LDA X,SHCPVL		;ADD IN LSB INTEGER
	ADC X,SHVEVL
	STA X,SHCPVL
	LDA X,SHCPVH
	ADC X,SHVEVH		;ADD IN MSB INTEGER
	STA X,SHCPVH
	IFMI
	CMP	I,0FA
	IFCC
	LDA	I,1
	STA	X,SHACTM
	THEN
	ELSE
	CMP	I,6
	IFCS
	LDA	I,1
	STA	X,SHACTM
	THEN
	THEN
	LDA X,SHCPHF
	CLC
	ADC X,SHVEHF
	STA X,SHCPHF
	LDA X,SHCPHL
	ADC X,SHVEHL
	STA X,SHCPHL
	LDA X,SHCPHH
	ADC X,SHVEHH
	STA X,SHCPHH
	IFMI
	CMP	I,0F8
	IFCC
	LDA	I,1
	STA	X,SHACTM
	THEN
	ELSE
	CMP	I,8
	IFCS
	LDA	I,1
	STA	X,SHACTM
	THEN
	THEN
	DEC X,SHACTM
	IFEQ
	JSR DEASHO
	THEN
	THEN
	DEX
	MIEND
	RTS

; INPUTS:	X=INDEX INTO SHOT INFO ARRAY
;
; OUTPUTS:	;SHOT POSITION ARRAY 0'D

DEASHO:	LDA I,0
	STA X,SHCPVH
	STA X,SHCPHH
	STA X,SHCPVL
	STA X,SHCPHL
	RTS
	.PAGE
	.SBTTL	SHOT VELOCITY TABLES

		;VERTICAL SHOT VELOCITIES
SHVELV:	.BYTE 10,0F,0F,0E,0E,0D,0C,0B
	.BYTE 0A,8,7,6,4,3,1,0
	.BYTE 0,0FE,0FD,0FB,0F9,0F8,0F7,0F5
	.BYTE 0F4,0F3,0F2,0F1,0F1,0F0,0F0,0F0
	.BYTE 0F0,0F0,0F0,0F1,0F1,0F2,0F3,0F4
	.BYTE 0F5,0F7,0F8,0F9,0FB,0FD,0FE,0FF
SHVHL:	.BYTE 0,1,3,4,6,7,8,0A
	.BYTE 0B,0C,0D,0E,0E,0F,0F,0F
	.BYTE 10,0F,0F,0E,0E,0D,0C,0B
	.BYTE 0A,8,7,6,4,3,1,0
	.BYTE 0,0FE,0FD,0FB,0F9,0F8,0F7,0F5
	.BYTE 0F4,0F3,0F2,0F1,0F1,0F0,0F0,0F0
	.BYTE 0F0,0F0,0F0,0F1,0F1,0F2,0F3,0F4
	.BYTE 0F5,0F7,0F8,0F9,0FB,0FD,0FE,0FF
		;HORIZONTAL SHOT VELOCITIES
SHVEFV:	.BYTE 0,0B0,50,0D0,20,50,60,50
	.BYTE 20,0E0,90,20,0A0,20,90,10
	.BYTE 0,70,0E0,60,0E0,70,20,0E0
	.BYTE 0B0,0A0,0B0,0E0,30,0B0,50,10
	.BYTE 0,50,0B0,30,0E0,0B0,0A0,0B0
	.BYTE 0E0,20,70,0E0,60,0E0,70,0FF
SHVHF:	.BYTE 0,90,20,0A0,20,90,0E0,20
	.BYTE 50,60,50,20,0D0,50,0B0,0F0
	.BYTE 0,0B0,50,0D0,20,50,60,50
	.BYTE 20,0E0,90,20,0A0,20,90,10
	.BYTE 0,70,0E0,60,0E0,70,20,0E0
	.BYTE 0B0,0A0,0B0,0E0,30,0B0,50,10
	.BYTE 0,50,0B0,30,0E0,0B0,0A0,0B0
	.BYTE 0E0,20,70,0E0,60,0E0,70,0FF
	.PAGE
	.SBTTL UP EXPLOSIONS

UPEXPO: LDX I,NEXPLO*DOTS/2
	LDA FRAME
	AND I,1
	IFEQ
	LDX I,NEXPLO*DOTS
	THEN
	LDY I,NEXPLO*DOTS/2
	BEGIN
	LDA X,EXTIME
	IFNE
	LDA X,EXCPVF
	CLC
	ADC X,EXVEVF
	STA X,EXCPVF
	LDA X,EXCPVL
	ADC X,EXVEVL
	STA X,EXCPVL
	LDA X,EXCPVH
	ADC X,EXVEVH
	STA X,EXCPVH
	LDA X,EXCPHF
	CLC
	ADC X,EXVEHF
	STA X,EXCPHF
	LDA X,EXCPHL
	ADC X,EXVEHL
	STA X,EXCPHL
	LDA X,EXCPHH
	ADC X,EXVEHH
	STA X,EXCPHH
	DEC X,EXTIME
	THEN
	DEX
	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL START EXPLOSION


STREXP: LDY EXCNTR
	INY
	CPY I,3
	IFCS
	LDY I,0
	THEN
	STY EXCNTR
	LDA I,4
	STA TEMP3
	LDA Y,EXPIX
	TAY
	BEGIN
	LDA POINT1
	STA Y,EXCPVL
	LDA POINT2
	STA Y,EXCPVH
	LDA POINT3
	STA Y,EXCPHL
	LDA POINT4
	STA Y,EXCPHH
	LDA RANDOM
	AND I,3F
	ORA I,8
	STA Y,EXTIME
	JSR PICKV
	JSR PICKH
	INY
	DEC TEMP3
	MIEND
	RTS

EXPIX:  .BYTE 0,5,0A

SHTLF:  LDA I,0F8
	STA Y,EXVEHL
	LDA RANDOM
	STA Y,EXVEHF
	AND I,7
	CLC
	ADC Y,EXVEHL
	STA Y,EXVEHL
	LDA I,0FF
	STA Y,EXVEHH
	RTS

SHTRT:  LDA I,0
	STA Y,EXVEHH
	STA Y,EXVEHL
	LDA RANDOM
	STA Y,EXVEHF
	AND I,7
	CLC
	ADC Y,EXVEHL
	STA Y,EXVEHL
	RTS

SHTUP:  LDA I,0
	STA Y,EXVEVH
	STA Y,EXVEVL
	LDA RANDOM
	STA Y,EXVEVF
	AND I,7
	CLC
	ADC Y,EXVEVL
	STA Y,EXVEVL
	RTS

SHTDN:  LDA I,0F8
	STA Y,EXVEVL
	LDA RANDOM
	STA Y,EXVEVF
	AND I,7
	CLC
	ADC Y,EXVEVL
	STA Y,EXVEVL
	LDA I,0FF
	STA Y,EXVEVH
	RTS

PICKV:  LDA RANDOM
	BMI SHTDN
	BPL SHTUP

PICKH:  LDA RANDOM
	BMI SHTLF
	BPL SHTRT
	.PAGE
	.SBTTL START/END MESSAGES

INMSG1: LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,20
	IFEQ
	LDA I,0
	LDX I,7
	BEGIN
	ORA X,BSTAT
	DEX
	MIEND
	LDY I,MISCOM
	TAX
	IFEQ
	TYA
	ORA MSGBIT
	STA MSGBIT
	LDA I,MNXBON?0FF
	AND MSGBT4
	STA MSGBT4
	ELSE
	TYA
	EOR I,0FF
	AND MSGBIT
	STA MSGBIT
	LDA ATRAFL
	IFNE
	LDA OPTSW1
	AND I,0C0
	CMP I,0C0
	IFNE
	LDA I,MNXBON
	ORA MSGBT4
	STA MSGBT4
	THEN
	THEN
	THEN
	ELSE 
	LDA RACTVE
	IFMI
	LDA I,10
	ELSE
	LDA I,4
	THEN
	ORA MSGBIT
	STA MSGBIT
	THEN
	RTS


	.PAGE
HISCHK:	LDX I,1
	STX TEMP1
	LDA ATRAFL
	IFEQ
	RTS
	THEN
	LDA I,0FF
	STA CRPLNT
	STA CRPLNT+1
	BEGIN
	LDX TEMP1
	LDY I,7
	BEGIN
	LDA X,SCORE3
	CMP Y,SCLDRH
	IFEQ
	LDA X,SCORE2
	CMP Y,SCLDRM
	IFEQ
	LDA X,SCORE1
	CMP Y,SCLDRL
	IFEQ
	CLC
	THEN
	THEN
	THEN
	IFCS
	LDA I,CGETIN
	STA STATE
	STA STATE+1
	LDA I,0
	STA POINT1
	STA POINT2
	STA POINT3
	STY X,CRPLNT
	LDA X,SCORE1
	STA DIFF1
	LDA X,SCORE2
	STA DIFF2
	LDA X,SCORE3
	STA DIFF3
	BEGIN
	LDA POINT1
	LDX Y,INLDRL
	STA Y,INLDRL
	STX POINT1
	LDA POINT2
	LDX Y,INLDRM
	STA Y,INLDRM
	STX POINT2
	LDA POINT3
	LDX Y,INLDRH
	STA Y,INLDRH
	STX POINT3
	LDA DIFF1
	LDX Y,SCLDRL
	STA Y,SCLDRL
	STX DIFF1
	LDA DIFF2
	LDX Y,SCLDRM
	STA Y,SCLDRM
	STX DIFF2
	LDA DIFF3
	LDX Y,SCLDRH
	STA Y,SCLDRH
	STX DIFF3
	DEY
	MIEND
	THEN
	DEY
	MIEND
	DEC TEMP1
	MIEND
	LDA CRPLNT
	IFPL
	CMP CRPLNT+1
	IFCS
	DEC CRPLNT+1
	THEN
	THEN
	LDA PLAYUP
	EOR I,1
	ASL
	ASL
	ORA PLAYUP
	ADC I,5
	STA OGLORY
	.PAGE
	.SBTTL	HISCORE INITIALS PREP
INTLDR:	LDY I,CATRCT		;DEFAULT IS FAILURE
	LDA OGLORY
	IFNE				;--;MORE HI SCORES?
	AND I,3				;YES.
	STA PLAYUP			;SET UP PLAYER ID
	DEC PLAYUP			;
	LSR OGLORY
	LSR OGLORY
	LDX PLAYUP
	LDA X,CRPLNT
	IFPL
	STA THSTAT
	LDA I,60.
	STA EGEFLG
	LDA I,2
	STA ZOOMST			;SET UP INITIAL COUNTER
	LDY I,CGETIN
	STY STATE
	RTS
	ENDIF
	JMP INTLDR			;TRY AGAIN
	ENDIF
	LDX I,0
	STX PLAYUP
	DEX
	STX POINT8
	STY STATE
	RTS


TRBFSC: LDX I,8
	LDY I,7
	BEGIN
	LDA X,SCBUFR
	ORA X,SCBUFR-1
	ORA X,SCBUFR-2
	IFNE
	LDA X,SCBUFR
	STA Y,SCLDRL
	LDA X,INBUFR
	STA Y,INLDRL
	DEX
	LDA X,SCBUFR
	STA Y,SCLDRM
	LDA X,INBUFR
	STA Y,INLDRM
	DEX
	LDA X,SCBUFR
	STA Y,SCLDRH
	LDA X,INBUFR
	STA Y,INLDRH
	ELSE
	DEX
	DEX
	THEN
	DEY
	DEX
	MIEND
	RTS
TRSCBF: LDX I,8
	LDY I,7
	BEGIN
	LDA Y,SCLDRL
	STA X,SCBUFR
	LDA Y,INLDRL
	STA X,INBUFR
	DEX
	LDA Y,SCLDRM
	STA X,SCBUFR
	LDA Y,INLDRM
	STA X,INBUFR
	DEX
	LDA Y,SCLDRH
	STA X,SCBUFR
	LDA Y,INLDRH
	STA X,INBUFR
	DEY
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	GET INITLS FROM PLAYER

GETINI:	LDA FRAME
	AND I,1F
	IFEQ
	DEC EGEFLG
	IFEQ
	LDX PLAYUP
	LDA X,CRPLNT
	CMP I,5
	IFCS
	JSR WRHIIN
	THEN
	JMP INTLDR
	THEN
	THEN
	LDA I,40
	STA LSCALE
	LDA I,1
	STA BSCALE
	LDX THSTAT
	JSR CHLETR
	LDX LASFIR
	LDA SWITCH
	AND I,MTRCTR
	STA LASFIR
	IFNE
	TXA 
	AND I,MTRCTR
	IFEQ
	LDA THSTAT
	CLC
	ADC I,8
	STA THSTAT
	DEC ZOOMST
	IFMI
	CMP I,29.
	IFCS
	JSR TRSCBF
	JSR WRHIIN
	THEN
	JSR INTLDR
	ELSE
	LDX THSTAT
	LDA I,1
	STA X,INLDRH
	THEN
	THEN
	THEN
	LDA I,CDGETI
	STA DSTATE
	STA DSTATE+1
	RTS
CHLETR:	LDA FRAME
	AND I,7
	IFEQ
	LDA SWITCH
	PHA
	AND I,MROTRT
	IFNE
	LDY X,INLDRH
	INY
	CPY I,27.
	IFCS
	LDY I,0
	THEN
	TYA
	STA X,INLDRH
	THEN
	PLA
	AND I,MROTLF
	IFNE
	LDY X,INLDRH
	DEY
	IFMI
	LDY I,26.
	THEN
	TYA
	STA X,INLDRH
	THEN
	THEN
	RTS


INHISC: LDX I,7
	BEGIN
	LDA X,DHISCM
	STA X,SCLDRM
	LDA X,DHIINM
	STA X,INLDRM
	LDA X,DHISCL
	STA X,SCLDRL
	LDA X,DHIINL
	STA X,INLDRL
	LDA X,DHIINH
	STA X,INLDRH
	DEX
	MIEND
	RTS

DHISCM: .BYTE 13,38,53,72,75,80,92,99
DHISCL: .BYTE 50,0,50,50,0,0,50,0
DHIINH: .BYTE 2,0F,0A,0D,12,0D,13,1
DHIINM: .BYTE 12,12,0F,0C,4,5,4,3
DHIINL: .BYTE 4,12,5,8,1,3,0D,5
	.PAGE
	.SBTTL	IRQ

;INPUTS NONE
;OUTPUTS:SOFTWARE INTEGRITY CHECK, POWERON
;	 IF NECESSARY

IRQ:	PHA
	TXA
	PHA
	TYA
	PHA
	CLD
	TSX
	CPX I,0D0
	IFCS
	LDA X,106
	CMP I,90
	BCS NOPROB
	AND I,0F0
	CMP I,50
	BNE PROBLM
NOPROB: JMP SOFTOK
	THEN
PROBLM: JMP PROBLM
	.PAGE

	.SBTTL	NORMAL IRQ PROCESSING

;INPUTS:NONE
;OUTPUTS:NONE

SOFTOK:	STA WTCHDG		;MUZZLE DOG
	STA INTACK
	JSR READSW
	JSR MODSND
	LDA $$CRDT
	CMP I,12
	IFCS
	BIT $USE
	IFPL
	LDA I,4
	STA NCTIME
	LDA I,-1
	STA $USE
	THEN
	THEN
	LDA NCTIME
	IFPL
	LDA $$CRDT
	STA IQTMP1
	JSR MOOLAH
	LDA IQTMP1
	CMP $$CRDT
	IFNE
	JSR CREDSN
	THEN
	THEN
	JSR UPGTIM
	JSR CTLEDS
	LDA $INTCT
	AND I,0F
	IFEQ
	JSR EAUPD
	THEN
	INC INCNTR
	INC SYNC
	LDA MKMDFL
	BMI CHEATR
	LDA HALT
	AND I,MSTEST
	IFNE
CHEATR: LDA HALT
	AND I,40
	IFNE
	LDA BUFRDY		;TIME TO SWAP BUFFERS?
	IFEQ
	STA SYNC		;RESET SYNC
	LDA VECRAM+1
	EOR I,BUFR2/200
	STA VECRAM+1		;POINT TO NEW BUFFER
	LDY I,<VECRAM+BUFR2>/100
	AND I,BUFR2/200
	IFNE
	LDY I,VECRAM/100
	THEN			;POINT TO OPEN BUFFER
	STY BUFRDY
	THEN
	STA VGSTOP
	STA VGSTART
	THEN
	ELSE
	LDA I,20
	STA BUFRDY
	THEN
	PLA
	TAY
	PLA
	TAX
	PLA
	RTI

	.PAGE
	.SBTTL	READ GAME SWITCHES

;INPUTS:GAMESW:ADDRESS OF ROTATE,
;	FIRE,TRACTOR,THRUST SWITCHES
;
;	POTGO:CONTROL PORT FOR READING
;	      SWITCHES
;
;
;OUTPUTS:SWITCH:STATE OF SWITCHES
;	 SAVED IN SWITCHS


READSW:	LDA IN2
	BMI 10$
	LDX PLAYUP
	IFEQ
10$:	LDA IN2
	AND I,0E0
	STA IQTMP1
	LDA IN1
	AND I,1F
	ORA IQTMP1
	THEN
	EOR I,0FF
	STA SWITCH
	LDA I,7
	STA SKCTL
	STA SKCTL2
	STA POTGO
	LDA POTIN
	STA OPTSW1
	STA POTGO2
	LDA POTIN2
	EOR I,2
	STA OPTSW2
	RTS

	.PAGE
	.SBTTL	CONTROL LEDS & EMCOUNTERS

CTLEDS: LDA ATRAFL
	IFNE
	LSR
	IFNE
	LDA I,10
	ELSE
	LDA I,20
	THEN
	ELSE
	LDA INCNTR
	AND I,40
	IFNE
	LDA $$CRDT
	IFNE
	CMP I,2
	IFCS
	LDA I,0
	ELSE
	LDA I,20
	THEN
	ELSE
	LDA I,30
	THEN
	ELSE
	LDA I,30
	THEN
	THEN
	LDX $CCTIM+2
	IFMI
	ORA I,1
	THEN
	LDX $CCTIM+1
	IFMI
	ORA I,2
	THEN
	TAX
	JSR CKFLIP
	TXA
	ORA FLIP
	LDX $USE
	IFMI
	AND I,0F7
	ELSE
	ORA I,8
	THEN
	STA OUT0
	RTS
CKFLIP: LDA IN0
	AND I,MSTEST
	IFNE
	LDA IN2
	IFMI
	LDA I,0C0
	ELSE
	LDY PLAYUP
	IFNE
	LDA I,0
	ELSE
	LDA I,0C0
	THEN
	THEN
	STA FLIP
	THEN
	RTS
	.PAGE

	.SBTTL GAME TIMER
UPGTIM: LDA INCNTR
	IFEQ
	LDA $USE
	IFMI
	LDA NCTIME
	IFPL
	DEC NCTIME
	THEN
	THEN
	LDA ATRAFL
	IFNE
	INC GTIMER
	IFEQ
	INC GTIMER+1
	THEN
	LDA PAUSTM
	IFPL
	DEC PAUSTM
	THEN
	THEN
	LDX PLAYUP
	LDA PLADED
	IFNE
	LDA X,STATE
	CMP I,CPLAY
	IFEQ
	LDA GTIMER
	AND I,3
	IFEQ
	LDA X,PLBONS
	IFNE
	SED
	SEC
	SBC I,1
	STA X,PLBONS
	CLD
	THEN
	THEN
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL	DISPLAY ROUTINE

;INPUTS:BUFRDY=POINTER TO OPEN BUFFER
;OUTPUTS:BUFRDY CLEARED TO INDICATE READY TO
;	 DISPLAY THIS BUFFER

DISPLA:	BEGIN
	LDX BUFRDY		;WAIT TIL BUFFER IS AVAILABLE
	NEEND
	STX VGLIST+1
	LDA I,VECRAM & 0FF+2
	STA VGLIST
	LDA BSCALE
	LDY LSCALE
	JSR VGSCAL
	LDX PLAYUP
	LDA X,DSTATE
	TAX
	LDA X,DSTLST+1
	PHA
	LDA X,DSTLST
	PHA
	RTS
DSTLST:	.WORD DSETUP-1
	.WORD DPLAY-1
	.WORD DPAUSE-1
	.WORD DEXPND-1
	.WORD DATRCT-1
	.WORD DDPSPA-1
	.WORD DEXPN2-1
	.WORD DGETIN-1
	.WORD DATRM1-1
	.WORD DATRM2-1
EDLIST:
DPAUSE: 
DSETUP:
DALWYS: JSR DJIVE
	JSR DFCOUNT
	JSR DFCOUNT
	JSR DSCORE
	JSR DBONUS
	JSR DSUBON
	JSR DNXBON
	JSR DLIVES
	JSR DMESGE
	JSR DYNMSG
	JSR DPLAUP
	JSR DCRED
	JSR DTIMER
NAMONY:	JSR VGHALT
	LDA I,0
	STA BUFRDY
	RTS
DATRM2:
DPLAY:	JSR DLANDR
	JSR DSHELD
	JSR DSHOTS
	JSR DEXPLO
	JSR DLSCAP
	JSR DASHIP
	JMP DALWYS
DEXPND:	JSR DLANDR
	JSR DSHELD
	JSR DLSCAP
	JMP DALWYS
DATRM1:
DDPSPA:	JSR DLANDR
	JSR DSHELD
	JSR DMAP
	JSR DSHOTS
	JSR DEXPLO
	JSR DSTRFD
	JSR CRSTAR
	JSR DASHIP
	JMP DALWYS
DEXPN2:	JSR DLANDR
	JSR DSHELD
	JSR DMAP
	JSR DEXPLO
	JSR DSTRFD
	JSR CRSTAR
	JSR DASHIP
	JMP DALWYS
DGETIN:	JSR DINSTR
	JSR DCRED
	JMP DALWYS
DATRCT:	JSR DHSTBL
	JMP DALWYS
DJIVE:  LXL JIVE
	LAH JIVE
	JMP VGJSRL
	.PAGE
	.SBTTL	DISPLAY HI SCORE TABLE
DHSTBL:
	LDA POINT8
	CMP I,0C0
	IFCS
DHISCR:	PLA
	PLA
	JSR HSTBOK
	JSR DRANK
	JMP DALWYS
	ELSE
	PLA
	PLA
	JSR DNAME
	JMP NAMONY
	THEN
	RTS

DINSTR: LDA I,MCONGR!MENTER!MPROTA!MTOCHG!MTRSEL!MPLAYR
	ORA MSGBT2
	STA MSGBT2
	LDA I,0
	STA MSGBT4
	JMP DHISCR
HSTBOK: LDA I,2
	STA NAMCNT
	JSR VGCNTR
	LDX I,7
	STX TEMP3
	LDX I,0F0
	STX POINT1
	JSR VGCNTR
	BEGIN
	JSR VGCNTR
	LDX POINT1
	LDA I,0E0
	LDY I,0
	JSR VGVTR
	LDY PLAYUP
	LDA Y,CRPLNT
	CMP TEMP3
	IFEQ
	JSR SETWHT
	ELSE
	JSR SETRED
	THEN
	LDA TEMP3
	EOR I,7
	CLC
	ADC I,1
	ASL
	JSR DSPCHR
	LDX I,0
	LDA I,6
	LDY I,0
	JSR VGVTR
	LDX TEMP3
	LDA X,INLDRH
	JSR DSPLTR
	LDX TEMP3
	LDA X,INLDRM
	JSR DSPLTR
	LDX TEMP3
	LDA X,INLDRL
	JSR DSPLTR
	LDX I,0
	LDA I,4
	LDY I,0
	JSR VGVTR
	JSR SETBLU
	LDX TEMP3
	CLC
	LDA X,SCLDRH
	JSR DIGIT2
	LDX TEMP3
	LDA X,SCLDRM
	JSR DIGIT2
	LDX TEMP3
	LDA X,SCLDRL
	JSR DIGIT2
	JSR VGCNTR
	LDA POINT1
	SEC
	SBC I,0D
	STA POINT1
	DEC TEMP3
	MIEND
	RTS
DSPLTR: ASL
	TAY
	IFEQ
	LDX VGMSGA
	LDA VGMSGA+1
	ELSE
	LDX Y,VGMSGA+14
	LDA Y,VGMSGA+15
	THEN
	JMP INJSRL


DNUMBR: PHA
	AND I,0F0
	LSR	
	LSR
	LSR
	JSR DSPCHR
	PLA
D1DIGT:	AND I,0F
	ASL
	JMP DSPCHR

DPLAUP:
	LDX PLAYUP
	LDA X,STATE
	CMP I,CEXPN2
	IFNE
	CMP I,CEXPND
	IFNE
	CMP I,CPAUSE
	IFNE
	CMP I,CGETIN
	IFNE
	LDA I,MPLAYR?0FF
	AND MSGBT2
	STA MSGBT2
	RTS
	THEN
	THEN
	THEN
	THEN
	JSR VGCNTR
	LDA I,MPLAYR
	ORA MSGBT2
	STA MSGBT2
	JSR DPLANO
	RTS

DPLANO: LDA I,14
	LDX I,5C
	LDY I,0
	JSR VGVTR
	LDX PLAYUP
	INX
	TXA
	JMP D1DIGT

	.PAGE
	.SBTTL	DISPLAY EXPLOSIONS
DEXPLO:	JSR SETPRP
	LDX I,NEXPLO*DOTS-1
	STX TEMP1
	BEGIN
	LDA X,EXTIME
	IFNE
	JSR VGCNTR
	LDX TEMP1
	LDA X,EXCPVH
	STA Z,YMSB
	LDA X,EXCPVL
	STA Z,YLSB
	LDA X,EXCPHH
	STA Z,XMSB
	LDA X,EXCPHL
	STA Z,XLSB
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR
	LDA I,0E0
	JSR VGDOT
	THEN
	DEC TEMP1
	LDX TEMP1
	EQEND
	RTS
	.PAGE
	.SBTTL	DISPLAY PLANETS
NPLANT	=5
DMAP:	LDX PLAYUP
	LDA X,STATE
	CMP I,CDSBTL
	IFNE
	LDA X,SSFLAG
	AND I,3
	TAX
	LDA X,SSINDX
	STA TEMP2
	LDX I,NPLANT-1
	STX TEMP1
	BEGIN
	LDA TEMP2
	ASL
	ADC PLAYUP
	TAY
	LDA Y,SIRNXR
	IFPL
	JSR INSPIC
	THEN
	DEC TEMP2
	DEC TEMP1
	MIEND
	JSR DHOPLA
	JMP DBOMUL
	THEN
	RTS
INSPIC: LDY TEMP2
	LDA Y,PLPIC
	CLC
	ADC Y,PICIX
	TAX
	LDA X,STPIC
	IFMI
	TXA
	CLC
	ADC X,STPIC
	TAX
	LDA I,0
	STA Y,PLPIC
	LDA X,STPIC
	THEN
	LDX Y,PLPIC
	PHA
	LDA FRAME
	AND Y,FRATE
	IFEQ
	INX
	THEN
	TXA
	STA Y,PLPIC
	PLA
	ASL
	TAY
	LDA Y,PLALIS+1
	LDX Y,PLALIS
	JSR VGJSRL
	RTS

DHOPLA: LDX PLAYUP
	LDA X,SSFLAG
	AND I,1
	IFEQ
	LDY I,10
	ELSE
	LDY I,12
	THEN
	STY TEMP2
	JSR INSPIC
	DEC TEMP2
	JMP INSPIC
PLALIS:	.WORD HOPLA1,HOPLA2,HOPLA3,HOPLA4,HOPLA5,HOPLA6,HOPLA7
	.WORD SIRIN1,SIRIN2
	.WORD DURIN1,DURIN2,DURIN3,DURIN4
	.WORD CNTRC1,CNTRC2
	.WORD NESCR1,NESCR2
	.WORD NOVA1,NOVA2,NOVA3
	.WORD EYEOPN,EYECLO
	.WORD VOLCAN
	.WORD VECRN1,VECRN2,VECRN3,VECRN4
	.WORD ERCTS1,ERCTS2,ERCTS3
	.WORD NOV21,NOV22,NOV23
	.WORD DBOLT1,DBOLT2,DBOLT3,DBOLT4,DBOLT5,DBOLT6
	.WORD ROTST1,ROTST2
	.WORD SWIRL1,SWIRL2
	.WORD SURND1,SURND2,SURND3
	 .WORD ASTRE1,ASTRE2,ASTRE3
	.WORD ASTR21,ASTR22,ASTR23
STPIC:
HOPLLS:	.BYTE 0,1,2,3,4,5,6,-7
SIRNLS:	.BYTE 7,7,8,8,-4
DURNLS:	.BYTE 9,0A,0B,0C,-4
CNTCLS:	.BYTE 0D,0E,-2
NESCLS:	.BYTE 0F,0F,10,10,-4
NOVALS:	.BYTE 11,12,13,-3
BIZRLS:	.BYTE 14,14,14,15,15,-5
VOLCLS:	.BYTE 16,-1
VECRLS:	.BYTE 17,18,19,1A,-4
ERCTLS:	.BYTE 1B,1C,1D,-3
NOV2LS:	.BYTE 1E,1F,20,-3
BOLTLS:	.BYTE 21,22,23,24,25,26,-6
ROSTLS:	.BYTE 27,27,28,28,-4
SWRLLS:	.BYTE 29,2A,-2
SURRLS:	.BYTE 2B,2C,2D,-3
ASTRLS: .BYTE 2E,2F,30,-3
AST2LS: .BYTE 31,32,33,-3
PICIX:	.BYTE NESCLS-STPIC,SIRNLS-STPIC,DURNLS-STPIC
	.BYTE CNTCLS-STPIC,NOVALS-STPIC
	.BYTE ERCTLS-STPIC,BIZRLS-STPIC,VECRLS-STPIC
	.BYTE VOLCLS-STPIC,NOV2LS-STPIC,SURRLS-STPIC
	.BYTE ROSTLS-STPIC,SWRLLS-STPIC,BOLTLS-STPIC
	.BYTE NOVALS-STPIC
	.BYTE HOPLLS-STPIC,ASTRLS-STPIC
	.BYTE HOPLLS-STPIC,AST2LS-STPIC
FRATE:  .BYTE 1,0F,3,0F,7,3,0F,7
	.BYTE 7,3,7,5,7,7,7,3
	.BYTE 7,1,3
	.PAGE 
	.SBTTL STAR FIELD

DSTRFD:
 	LDX I,0F 
	STX TEMP1
	BEGIN
	JSR VGCNTR
	LDX TEMP1
	LDA X,STCPVL
	STA Z,YLSB
	LDA X,STCPVH
	STA Z,YMSB
	LDA X,STCPHL
	STA Z,XLSB
	LDA X,STCPHH
	STA Z,XMSB
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR
	JSR SETRND
	LDX TEMP1
	LDA X,STBRIT
	PHA
	SEC
	SBC I,4
	STA X,STBRIT
	PLA
	JSR VGDOT
	DEC TEMP1
	MIEND
	RTS


CRSTAR:
 	LDA WAIT
	IFEQ
	LDA FRAME
	AND I,0F
	TAX
	LDA RANDOM
	STA X,STCPVL
	LDA RANDOM
	AND I,3
	CLC
	ADC I,0FE
	STA X,STCPVH
	LDA RANDOM
	STA X,STCPHL
	LDA RANDOM
	AND I,3
	CLC
	ADC I,0FE
	STA X,STCPHH
	LDA I,0C0
	STA X,STBRIT
	LDA I,2
	STA WAIT
	ELSE
	DEC WAIT
	THEN
	RTS
	.PAGE
	.SBTTL	DISPLAY SHOTS

; INPUTS:	SHCPV,SHCPH=SHOT POSITIONS
;
; OUTPUTS:

DSHOTS: JSR SETRED
	LDX I,ASHOTS+PSHOTS+1
	STX TEMP1
	BEGIN
	LDA X,SHACTM
	IFNE
	JSR VGCNTR
	LDX TEMP1
	LDA X,SHCPHH		;SET UP COORDS TO DRAW BLANK
	STA Z,XMSB		;VECTOR TO SHOT POSITION
	LDA X,SHCPHL
	STA Z,XLSB
	LDA X,SHCPVL
	STA Z,YLSB
	LDA X,SHCPVH
	STA Z,YMSB
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR		;PUT VECTOR ON OPEN BUFFER
	LDA TEMP1
	CMP I,4
	IFCC
	JSR SETYLW
	THEN
	LDA I,0E0
	JSR VGDOT
	THEN
	DEC TEMP1
	LDX TEMP1
	MIEND
	RTS
	.PAGE
	.SBTTL	DISPLAY LANDER
;INPUTS:LACPVH,LACPVL,LACPHH,LACPHL=
;	LANDER COORDINATES
;	LANPIC=VECTOR ROM ADDRESS OF LANDER PICTURE

;OUTPUTS:LANDER PICTURE DRAWN
;	 VGLIST UPDATED
;	A,X,XCOMP,VGLIST UPDATED

DLANDR:	LDX PLAYUP
	LDA X,PLADED
	IFNE
	JSR DTOSHP
	JSR SETBLU
	JSR DRASHP
	JSR DFLAME
	THEN
	RTS
DTOSHP: JSR VGCNTR		;CENTER BEAM
	LDX I,3
	BEGIN
	LDA X,LACPHL		;SET UP COORDS FOR VGUT
	STA X,XCOMP
	DEX
	MIEND
	LDX I,XCOMP
	LDA I,0			;NULL VECTOR
	STA VGBRITE
	JSR VGVCTR
	RTS


	.SBTTL	DRAW SHIP

;INPUTS:LANGLE=ANGLE OF SHIP
;	LPICIX=TABLE OF INDEXES INTO LPICOS
;	LPICOS=TBLE OF VECTOR DELTAS USED TO
;	DRAW SHIP
;	LPICLN=# OF VECTORS USED TO DRAW SHIP
;
;OUTPUTS:COUNT,XCOMP,VGBRITE,Z,X,Y DESTROYED
;
;	 VGBUFFER UPDATED

DRASHP: LDA LANGLE
	AND I,0FE
	TAY
	LDA Y,SHJSRL+1
	LDX Y,SHJSRL
	JSR INJSRL
	RTS


DFLAME: LDA THSTAT
	IFNE
	JSR SETRED
	ELSE
	JSR SETBLK
	THEN
	LDA LANGLE
	AND I,0FE
	TAY
	LDX Y,FLADRS
	LDA Y,FLADRS+1
	JSR VGJSRL

DTRCTR: LDA TRSTAT
	IFNE
	LDX PLAYUP
	LDY X,CRPLNT
	LDA Y,PLANID
	CMP I,0A8
	IFNE
	JSR SETGRN
	JSR DTOSHP
	LDY PLAYUP
	LDX Y,CRPLNT
	LDY I,0
	CPX I,3
	IFEQ
	LDA LACPVH
	IFMI
	LDY I,2
	THEN
	THEN
	LDX Y,TRADRS
	LDA Y,TRADRS+1
	JSR VGJSRL
	THEN
	THEN
	RTS
DSHELD: JSR SETRND
	LDA ATRAFL
	IFNE
	LDX PLAYUP
	LDA X,PLADED
	IFNE
	LDA SWITCH
	AND I,MTRCTR
	IFNE
	JSR SH0SN
SHLDON: JSR DTOSHP
	LAH SHEPIC
	LXL SHEPIC
	JSR VGJSRL
	THEN
	THEN
	ELSE
	LDA TRSTAT
	BNE SHLDON
	THEN
	.PAGE
	.SBTTL	DRAW BEAMING FUEL
DTRUP:	LDA SPRKLE
	IFNE
	LDX PLAYUP
	LDA X,PLADED
	IFNE
	JSR SETRND
	LDA I,7
	STA TEMP1
	BEGIN
	JSR VGCNTR
	LDA RANDOM
	AND I,3F
	STA TEMP2
	LDA RANDOM
	AND I,0F
	STA TEMP3
	LDA LACPVL
	LDX PLAYUP
	LDY X,CRPLNT
	CPY I,3
	BNE 10$
	BIT LACPVH
	IFMI
	CLC
	ADC TEMP2
	STA Z,YLSB
	LDA LACPVH
	ADC I,0
	ELSE
10$:	SEC
	SBC TEMP2
	STA Z,YLSB
	LDA LACPVH
	SBC I,0
	THEN
	STA Z,YMSB
	LDA LACPHL
	BIT RANDOM
	IFMI
	SEC
	SBC TEMP3
	STA Z,XLSB
	LDA LACPHH
	SBC I,0
	ELSE
	CLC
	ADC TEMP3
	STA Z,XLSB
	LDA LACPHH
	ADC I,0
	THEN
	STA Z,XMSB
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR
	LDA I,0E0
	JSR VGDOT
	DEC TEMP1
	MIEND
	THEN
	THEN
	RTS

	
	.PAGE
	.SBTTL	DISPLAY LANDSCAPE
;INPUTS:	START ADDRESS OF VG INITIALIZATION
;		ROUTINE,HEDGEL,HEDGEH = LENGHT FROM CENTER TO
;		LEFT EDGE OF SCREEN, YINITL,YINITH = VERTICAL
;		STARTING POINT OF LANDSCAPE
;OUTPUTS:	XCOMP,BUFFER,A,X,Y,BUFRDY UPDATED

DLSCAP:  JSR VGCNTR		;CENTER BEAM
	LDA I,HEDGEL
	SEC
	SBC OVRSCN		;POINT TO LEFT HORIZ EDGE OF SCAPE
	STA XACCL
	IFEQ
	SEC
	THEN
	LDA I,HEDGEH
	SBC I,0
	STA XACCH
	LDA LFTSCT		;USE LEFTMOST SECTOR #*2 AS
	ASL			;INDEX INTO VERTICAL OFFSET TABLE
	TAY
	STY TEMP1
	TYA
	STA TEMP2
	LDA VLEGEL
	ADC NY,SCTVOS		;ADJUST V STARTING POINT FOR THIS SECTOR
	STA YACCL
	LDA VLEGEH
	INY
	ADC NY,SCTVOS
	DEY
	STA YACCH
	BEGIN
	LDX PLAYUP
	LDA X,PLADED
	BEQ LITEON
	LDA X,SSFLAG
	AND I,8
	IFNE
	JSR SETBLK
	ELSE
LITEON:	JSR SETGRN
	THEN
	LDA LSCALE
	BNE DSECTR
	LDA TEMP1
	SEC
	SBC TEMP2
	AND I,1F
	CMP I,6
	IFCS
	CMP I,1C
	IFCC
DSECTR:	LDA I,0			;DRAW BLANK VECTOR TO STARTING POINT OF
	STA VGBRIT		;CURRENT SECTOR TO DRAW
	LDX I,3
	BEGIN
	LDA X,XACCL		;PUT COORDS INTO XCOMP - FOR VGVCTR
	STA ZX,XLSB
	DEX
	MIEND
	LDX I,XCOMP
	JSR VGVCTR		;DRAW VECTOR
	LDY TEMP1
	LDA NY,SECADR
	TAX
	INY
	LDA NY,SECADR
	IFNE
	JSR VGJSRL		;PUT SECTOR JSRL IN OPEN BUFFER
	JSR DBASE
	JSR DFUEL
	THEN
	JSR VGCNTR		;RECENTER
	THEN
	THEN
	LDY TEMP1
	INC XACCH
	LDA YACCL
	CLC
	ADC NY,SCTVDL
	STA YACCL
	LDA YACCH
	INY
	ADC NY,SCTVDL
	DEY
	STA YACCH
	INY			;POINT TO NEXT JSRL ADDRESS & OFFSETS
	INY
	TYA
	AND I,1F
	STA TEMP1
	CMP TEMP2		;DONE WITH ALL?
	EQEND
	JMP DREACT
OVSIRN:	.WORD 0,-100,-100,0E0
	.WORD -60,-140,-140,80
	.WORD -40,-40,80,0
	.WORD -120,-120,-120,100
OVDURN:	.WORD 0,-180,-260,-260,-200,-120,-240,-200
	.WORD 0,-180,-1C0,-240,-1C0,0,-1A0,-160
OVCNTC:	.WORD 0,80,40,60,60,0,0,80
	.WORD 0C0,0C0,40,80,20,40,40,80
OVEASY:	.WORD 0,0,-100,-100
	.WORD 0,0,0,-100
	.WORD -200,-200,-100,-100
	.WORD 0,-100,-100,0
OVBIZR:	.WORD 0,-100,-100,-100
	.WORD -100,-100,100,-200
	.WORD -200,-100,0,0
	.WORD 100,0,0,0
OVVOLC	=OVSIRN
OVERCT:	.WORD 0,0,2C0,380
	.WORD 580,140,140,-80
	.WORD -80,80,80,80
	.WORD 80,80,80,80
	OVNOVA=OVSIRN
	OVNIMI=OVSIRN
	OVSURR=OVSIRN
OVDUCA	=VDDUCA			;JUST 0'S
OVFLOT	=VDDUCA
OVDIFF:	.WORD 0,-100,-300,-300
	.WORD -300,-300,-300,-240
	.WORD -240,-180,-180,-280
	.WORD -280,-3C0,-340,-240
	.PAGE
SIBADR:	.WORD BASE01,BASE14,BASE13,BASE07
	.WORD BASE17,BASE06,BASE18,BASE08
SITADR:	.WORD TURT01,TURT14,TURT13,TURT07
	.WORD TURT17,TURT06,TURT18,TURT08
DUBADR:	.WORD BASE11,BASE12,BASE09,BASE09
	.WORD BASE13,BASE09,BASE14,BASE09
DUTADR:	.WORD TURT11,TURT12,TURT09,TURT09
	.WORD TURT13,TURT09,TURT14,TURT09
CTBADR:	.WORD BASE09,BASE10,BASE09,BASE10
	.WORD BASE09,BASE10,BASE09,BASE10
CTTADR:	.WORD TURT09,TURT10,TURT09,TURT10
	.WORD TURT09,TURT10,TURT09,TURT10
NIBADR:	.WORD BASE12,BASE14,BASE11,BASE14
	.WORD BASE14,BASE11,BASE10,BASE11
NITADR:	.WORD TURT12,TURT14,TURT11,TURT14
	.WORD TURT14,TURT11,TURT10,TURT11
NOBADR:	.WORD BASE13,BASE11,BASE13,BASE10
	.WORD BASE13,BASE09,BASE14,BASE14
NOTADR:	.WORD TURT13,TURT11,TURT13,TURT10
	.WORD TURT13,TURT09,TURT14,TURT14
EABADR:	.WORD BASE13,BASE10,BASE13,BASE13
	.WORD BASE12,BASE12,BASE13,BASE10
EATADR:	.WORD TURT13,TURT10,TURT13,TURT13
	.WORD TURT12,TURT12,TURT13,TURT10
BZBADR:	.WORD BASE11,BASE13,BASE12,BASE14
	.WORD BASE13,BASE10,BASE14,BASE11
BZTADR:	.WORD TURT11,TURT13,TURT12,TURT14
	.WORD TURT13,TURT10,TURT14,TURT11
ERBADR:	.WORD BASE02,BASE16,BASE04,BASE03
	.WORD BASE14,BASE11,BASE13,BASE14
ERTADR:	.WORD TURT02,TURT16,TURT04,TURT03
	.WORD TURT14,TURT11,TURT13,TURT14
VLBADR:	.WORD BASE11,BASE11,BASE14,BASE13
	.WORD BASE12,BASE12,BASE13,BASE12
VLTADR:	.WORD TURT11,TURT11,TURT14,TURT13
	.WORD TURT12,TURT12,TURT13,TURT12
DCBADR:
DCTADR:
FLBADR:	.WORD BASE14,BASE10,BASE11,BASE14
	.WORD BASE11,BASE11,BASE14,BASE14
FLTADR:	.WORD TURT14,TURT10,TURT11,TURT14
	.WORD TURT11,TURT11,TURT14,TURT14
SUBADR:	.WORD BASE05,BASE13,BASE15,BASE12
	.WORD BASE13,BASE05,BASE05,BASE14
SUTADR:	.WORD TURT05,TURT13,TURT15,TURT12
	.WORD TURT13,TURT05,TURT05,TURT14
DFBADR:	.WORD BASE11,BASE14,BASE14,BASE12
	.WORD BASE14,BASE14,BASE13,BASE14
DFTADR:	.WORD TURT11,TURT14,TURT14,TURT12
	.WORD TURT14,TURT14,TURT13,TURT14
SIBIX:	.BYTE	0,1,2,3,4,0,5,0
	.BYTE	0,6,0,0,7,0,8,0
DUBIX:	.BYTE 1,0,0,2,3,0,4,0
	.BYTE 0,0,5,6,7,0,8,0

CTBIX:	.BYTE 0,1,0,2,0,3,0,4
	.BYTE 0,5,0,6,0,7,0,8
NIBIX:	.BYTE 0,0,0,0,1,2,3,4
	.BYTE 5,6,7,8,0,0,0,0
EABIX:	.BYTE 0,1,0,0,2,0,3,4
	.BYTE 0,5,0,6,7,0,0,8
BZBIX:	.BYTE 0,1,2,0,3,4,5,6
	.BYTE 0,0,0,7,0,8,0,0
ERBIX:	.BYTE 0,1,2,0,3,4,0,0
	.BYTE 5,0,6,7,8,0,0,0
VLBIX:	.BYTE 0,0,0,1,2,3,4,0
	.BYTE 5,6,7,8,0,0,0,0
NOBIX:	.BYTE 0,0,0,1,2,3,4,5
	.BYTE 6,0,7,0,8,0,0,0
DCBIX:
CKSUM9: .BYTE 7A
	.PAGE
	.SBTTL	DISPLAY LIVE BASES
; INPUTS:	TEMP1: SECTOR POINTER
;		*2
;		BASTAT: CURRENT STATUS OF BASES
;		XACCL,XACCH=POINTER TO LEFT MOST POINT OF
;		SECTOR HORIZONTAL
;		YACCL,YACCH=SAME POINTER FOR VERTICAL
;
; OUTPUTS:	BASES DRAWN
DBASE:	JSR VGCNTR		;CENTER BEAM
	LDA TEMP1
	LSR
	TAY
	LDA NY,BSINDX
	IFNE
	TAY
	DEY
	STY TEMP4
	LDA Y,BSTAT		;CURRENTLY ALIVE?
	IFNE
	LDA Y,BACPVL
	STA Z,YLSB
	LDA Y,BACPVH
	STA Z,YMSB
	LDA Y,BACPHL
	STA Z,XLSB
	LDA Y,BACPHH
	STA Z,XMSB
	LDA I,0			;BLANK VECTOR
	STA VGBRITE
	LDX I,XCOMP
	JSR VGVCTR		;DRAW VECTOR
	JSR SETRED
	LDY TEMP4
	LDA Y,BFSTAT
	IFNE
	SEC
	SBC I,1
	STA Y,BFSTAT
	ELSE
	TYA
	CLC
	ADC I,8
	STA TEMP4
	THEN
	LDA TEMP4
	ASL
	TAY
	LDA NY,BASADR
	TAX
	INY
	LDA NY,BASADR
	JSR VGJSRL		;ADD BASE JSRL TO BUFFER
	THEN
	THEN
	LDY	TEMP1
	RTS
	.PAGE
DFUEL:	JSR VGCNTR		;CENTER BEAM
	JSR SETBLU
	LDA TEMP1
	LSR
	TAY
	LDA I,0
	STA POINT2
				;RESIDENT SECTOR OF FUEL?
	LDA Y,FSTAT
	IFNE
	LDA XACCL
	CLC			;POINT TO LOWER LEFT CORNER
	ADC NY,FHOS		;OF FUEL DEPOSIT
	STA Z,XLSB
	LDA XACCH
	STA Z,XMSB
	IFCS
	INC Z,XMSB
	THEN
	LDA NY,FVOS
	STA POINT1
	LDX I,3
	BEGIN
	ASL POINT1
	ROL POINT2
	DEX
	MIEND
	LDA POINT2
	CMP I,8
	IFCS
	ORA I,0F0
	THEN
	STA POINT2
	LDA YACCL
	CLC
	ADC POINT1
	STA Z,YLSB
	LDA YACCH
	ADC POINT2
	STA Z,YMSB
	LDA I,0
	STA VGBRIT		;DRAW BLANK VECTOR THERE
	LDX I,XCOMP
	JSR VGVCTR
	LDX PLAYUP
	LDA X,CRPLNT
	CMP I,3
	BNE REGFUL
	LDA Z,YMSB
	IFMI
	LDA FUEADR+3
	LDX FUEADR+2
	ELSE
REGFUL: LDX FUEADR
	LDA FUEADR+1
	THEN
	JSR VGJSRL		;PUT JSRL INTO OPEN BUFFER
	THEN
	RTS
SIFHOS:	.BYTE 32.,128.,128.,160.
	.BYTE 32.,96.,0,0
	.BYTE 96.,0,0,0
	.BYTE 96.,96.,0,192.
SIFVOS:	.BYTE 0,0,24,0EC
	.BYTE 1A,0,0,0
	.BYTE 0,0,0,0
	.BYTE 0,24,0,0F0

DUFVOS: .BYTE 0,0,0,0
	.BYTE 0A,0EE,4,0
	.BYTE 0,0,0F8,8
	.BYTE 8,0,0,0

DUFHOS: .BYTE 0,0,0C0,40
	.BYTE 60,0C0,80,0
	.BYTE 0,0,0C0,0A0
	.BYTE 80,0,40,40



CTFVOS: .BYTE 0,0,2,0
	.BYTE 0,8,8,0
	.BYTE 0,0,0,0
	.BYTE 0,4,4,0

CTFHOS: .BYTE 0,20,60,0
	.BYTE 0,20,40,0
	.BYTE 20,0A0,20,0
	.BYTE 0,40,80,0


NIFVOS: .BYTE 0,0,0,0
	 .BYTE 0,22,0F0,0
	.BYTE 30,30,4,0
	.BYTE 0,0,0,0

NIFHOS: .BYTE 0,0,0,0
	 .BYTE 40,0C0,40,60
	.BYTE 20,0C0,60,40
	.BYTE 0,0,0,0

EAFHOS:	.BYTE 0A0,0,80,0,80,60,0,0
	.BYTE 80,0,80,0,0,80,0,60
	DFFVOS=VDDUCA
	NOFID=VDDUCA
	EAFVOS=VDDUCA

BZFVOS: .BYTE 0,0,0,0
	.BYTE 0,0,0,0
	.BYTE 20,0,0,0
	.BYTE 0,0,0,0

BZFHOS: .BYTE 0,0A0,60,60
	.BYTE 80,40,0,80
	.BYTE 60,0,60,0
	.BYTE 60,0,60,0
ERFHOS:	.BYTE 60,0,20,0
	.BYTE 0,60,0,60
	.BYTE 40,40,40,60
	.BYTE 60,60,0,0
ERFVOS:	.BYTE 0,0,0,0
	.BYTE 0,0,0,0
	.BYTE 2C,2C,12,12
	.BYTE 24,0,0,0
VLFHOS:	.BYTE 0,0,0,0A0
	.BYTE 0A0,60,60,0
	.BYTE 0,60,40,80
	.BYTE 0,0,0,0
VLFVOS:	.BYTE 0,0,0,10
	.BYTE 40,0,20,0
	.BYTE 0,0,0,20
	.BYTE 0,0,0,0
SUFHOS:	.BYTE 0,0,0,0,0,60,40,0
	.BYTE 0,0A0,80,0,0,0,0,0
SUFVOS:	.BYTE 0,0,0,0,0,0,0,0
	.BYTE 0,0,0F0,0,0,0,0,0
DFFHOS:	.BYTE 0,0,0,0,0,0,0,0
	.BYTE 20,80,0,60,60,0,0,0
DCFVOS:
DCFHOS:
FLFHOS:	.BYTE 0C0,0,0,0,0A0,0,0,80
	.BYTE 0,0,0,60,0,0A0,0,0
FLFVOS:	.BYTE 16,0,0,0,16,0,0,0A
	.BYTE 0,0,0,0A,0,26,0,0
	.PAGE
DREACT:	LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,20
	IFNE
	LDA RACTVE
	IFPL
	JSR SETRND
	ELSE
	JSR SETPRP
	THEN
	LXL REACTR
	LAH REACTR
	JSR VGJSRL
	THEN
	RTS
	.PAGE


DASHIP: LDX PLAYUP
	LDA X,STATE
	CMP I,CATRM1
	BEQ XCEPT2
	CMP I,CATRM2
	BEQ XCEPT3
	CMP I,CPLAY
	IFEQ
XCEPT3: JMP DPATRO
	THEN
XCEPT2: LDY X,APDEAD
	IFEQ
	CMP I,CDSBTL
	IFEQ
	LDX ASHPID
	STX TEMP1
	JMP DSHIP1
	THEN
	LDX I,1
	STX TEMP1
	BEGIN
	JSR DSHIP1
	MIEND
	THEN
	RTS
DPATRO:	LDX PLAYUP
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	IFPL
	LDX I,1
	STX TEMP2
	LDX I,3
	STX TEMP1
	BEGIN
	JSR DSHIP1
	DEC TEMP2
	MIEND
	THEN
	RTS
DSHIP1: JSR VGCNTR
	LDX TEMP1
	LDA X,ASDETM
	IFEQ
	LDA X,ASCPVH
	STA Z,YMSB
	LDA X,ASCPVL
	STA Z,YLSB
	LDA X,ASCPHH
	STA Z,XMSB
	LDA X,ASCPHL
	STA Z,XLSB
	LDX I,XCOMP
	LDA I,0
	STA VGBRIT
	JSR VGVCTR
	LDA TEMP1
	ASL
	TAY
	LDA Y,ASADR+1
	LDX Y,ASADR
	JSR VGJSRL
	THEN
	DEC TEMP1
	LDX TEMP1
	RTS
	.PAGE
	.SBTTL 	DISPLAY SCORE







DSCORE: LDX I,1
	STX TEMP4
	BEGIN
	JSR ALPSCA
	JSR VGCNTR
	LDA I,0A0
	STA Z,XLSB
	LDA I,0D0
	STA Z,YLSB
	LDA I,1
	STA Z,YMSB
	LDX TEMP4
	LDA X,SCPHH
	STA Z,XMSB
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR
	LDA I,4
	CLC
	ADC TEMP4
	STA TEMP1
	LDA ATRAFL
	IFNE
	LDA TEMP4
	CMP PLAYUP
	IFNE
	
	JSR SMSCAL
	THEN
	THEN
	SEC
	BEGIN
	LDX TEMP1
	LDA X,SCORE1
	JSR DIGIT2
	DEC TEMP1
	DEC TEMP1
	MIEND
	DEC TEMP4
	MIEND
	JMP ALPSCA

SCPHH:  .BYTE -2,0

INJSRL: LDY I,1
	STA NY,VGLIST
	DEY
	TXA
	STA NY,VGLIST
	LDA VGLIST
	CLC
	ADC I,2
	STA VGLIST
	IFCS
	INC VGLIST+1
	THEN
	RTS

SETBLK:	LDY I,0
	BEQ INSTAT
SETBLU: LDY I,BLUE
	BNE INSTAT
SETGRN: LDY I,GREEN
	BNE INSTAT
SETRED: LDY I,RED
	BNE INSTAT
SETBLG: LDY I,BLUGR
	BNE INSTAT
SETPRP: LDY I,PURPLE
	BNE INSTAT
SETYLW: LDY I,YELLOW
	BNE INSTAT
SETWHT: LDY I,WHITE
INSTAT: LDA I,0
	JMP VGSTAT

SETRND: LDA RANDOM
	AND I,0C
	IFEQ
	ORA I,1
	THEN
	TAY
	BNE INSTAT
ALPSCA: LDA I,1
	LDY I,40
	JMP VGSCAL
SMSCAL: LDY I,68
	LDA I,1
	JMP VGSCAL
	.PAGE


DFCOUNT: 
	LDA I,1
	STA TEMP4
	BEGIN
	JSR ALPSCA
	JSR VGCNTR
	JSR SETGRN
	LDA I,0A0
	STA Z,XLSB
	STA Z,YLSB
	LDA I,1
	STA Z,YMSB
	LDX TEMP4
	LDA X,FCPHH
	STA Z,XMSB
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR
	LDA I,4
	CLC
	ADC TEMP4
	STA TEMP1
	LDA ATRAFL
	IFNE
	LDA TEMP4
	CMP PLAYUP
	IFNE
	JSR SMSCAL
	THEN
	THEN
	SEC
	BEGIN
	LDX TEMP1
	LDA X,FUEL1
	JSR DIGIT2
	DEC TEMP1
	DEC TEMP1
	MIEND
	DEC TEMP4
	MIEND
	RTS

FCPHH:  .BYTE -2,0
DSPCHR:	TAY
	LDX Y,VGMSGA+2
	LDA Y,VGMSGA+3
	JSR INJSRL
	RTS
	.PAGE



DLIVES: JSR SETBLU
	LDX I,1
	STX TEMP1
	BEGIN
	LDA X,LIVES
	IFNE
	IFPL
	CMP I,5
	IFCS
	LDA I,5
	THEN
	STA TEMP2
	LDA X,LIVCOH
	PHA
	LDA X,LIVCOV
	TAX
	PLA
	JSR MESGPOS
	BEGIN
	LDA SHJSRL+1
	LDX SHJSRL
	JSR INJSRL
	LDY TEMP1
	LDA Y,LIVOSV
	LDX Y,LIVOSH
	LDY I,0
	JSR VGVTR
	DEC TEMP2
	EQEND
	THEN
	THEN
	DEC TEMP1
	LDX TEMP1
	MIEND
	RTS


LIVCOV: .BYTE 74,74
LIVCOH: .BYTE 0A0,58
LIVOSV: .BYTE 0F8,8
LIVOSH: .BYTE 0FB,0FB
DTIMER:
	LDX PLAYUP
	LDA X,STATE
	CMP I,CPLAY
	IFEQ
	LDA X,CRPLNT
	TAX
	LDA X,PLANID
	AND I,0A8
	IFNE
	LDA APTIME
	IFPL
	JSR SETWHT
	JSR VGCNTR
	LDA I,0E0
	TAX
	LDY I,0
	JSR VGVTR
	LDA APTIME
	IFEQ
	SEC
	JSR DIGITZ
	CLC
	LDA I,0
	JSR DIGITZ
	ELSE
	SEC
	JSR DIGIT2
	THEN
	THEN
	THEN
	THEN
	RTS


DSUBON: LDX PLAYUP
	LDA X,STATE
	CMP I,CEXPN2
	IFEQ
	LDA X,FIRPLA
	CMP I,1
	IFEQ
	LSR
	STA POINT2
	LDY X,CRPLNT
	LDA Y,SUBONS
	STA POINT1
	LDY I,3
	BEGIN
	ASL POINT1
	ROL POINT2
	DEY
	MIEND
	LDA X,PLBONS
	CLC
	ADC POINT1
	STA POINT1
	IFCS
	INC POINT2
	THEN
	JSR VGCNTR
	LDA I,-8
	LDX I,4
	LDY I,0
	JSR VGVTR
	LDA POINT2
	SEC
	JSR DIGIT2
	LDA POINT1
	JSR DIGIT2
	LDA I,0
	CLC
	JSR DIGIT2
	THEN
	THEN
	RTS

SUBONS: .BYTE 0,2,6,12,20
DBONUS:	LDX PLAYUP
	LDA X,STATE
	CMP I,CPLAY
	IFEQ
	JSR VGCNTR
	LDA I,6F
	LDX I,68
	LDY I,0
	JSR VGVTR
	LDX PLAYUP
	LDA X,PLBONS
	SEC
	JSR DIGIT2
	LDA I,0
	JSR DIGIT2
	LDA I,MBONUS
	ORA MSGBIT
	STA MSGBIT
	ELSE
	LDA I,MBONUS?0FF
	AND MSGBIT
	STA MSGBIT
	THEN
	RTS
DNXBON: LDA MSGBT4
	AND I,MNXBON
	IFNE
	JSR VGCNTR
	LDY I,0
	LDX I,5C
	LDA I,0C
	JSR VGVTR
	LDX PLAYUP
	LDA X,BSCOR3
	SEC
	JSR DIGIT2
	LDX PLAYUP
	LDA X,BSCOR2
	JSR DIGIT2
	LDA I,0
	JSR DIGIT2
	THEN
	RTS
DBOMUL: JSR SETBLG
	LDA I,MESTIM?0FF
	AND MSGBT3
	STA MSGBT3
	LDY PLAYUP
	LDA Y,SSFLAG
	PHA
	AND I,3
	TAX
	LDA X,BOINDX
	CLC
	ADC PLAYUP
	STA TEMP4
	PLA
	AND I,1
	STA DIFF1
	TAX
	LDA X,BOINDX
	STA DIFF1
	LDA I,4
	STA TEMP3
	BEGIN
	JSR VGCNTR
	LDX TEMP4
	LDA X,SIRNXR
	IFPL
	LDX DIFF1
	LDA X,MPOSVH
	STA Z,YMSB
	LDA X,MPOSVL
	STA Z,YLSB
	LDA X,MPOSHH
	STA Z,XMSB
	LDA X,MPOSHL
	STA Z,XLSB
	STX TEMP2
	LDA I,0
	STA VGBRIT
	LDX I,XCOMP
	JSR VGVCTR
	LDX TEMP4
	LDA X,SAVBON
	SEC
	JSR DIGIT2
	LDA I,0
	JSR DIGIT2
	THEN
	DEC DIFF1
	DEC DIFF1
	DEC TEMP4
	DEC TEMP4
	DEC TEMP3
	MIEND
	RTS

MPOSVH: .BYTE 2,2,0FE,0FE,0FD,0FD,2,2,0,0
	.BYTE 2,2,0FF,0FF,0FD,0FD,0FF,0FF,2,2

MPOSVL: .BYTE 20,20,0,0,60,60,0,0,0,0

	.BYTE 0,0,90,90,80,80,30,30,10,10

MPOSHH: .BYTE 2,2,2,2,0FD,0FD,0FD,0FD,0FD,0FD
	.BYTE -1,-1,2,2,-1,-1,-3,-3,2,2

MPOSHL: .BYTE 60,60,80,80,60,60,0E0,0E0,0,0
	.BYTE 0A0,0A0,0E0,0E0,-1,-1,10,10,0E0,0E0
BOINDX: .BYTE 8,12,1C

DYNMSG: LDY I,1F
	STY TEMP3
	LDA MSGBIT
	STA POINT1
	LDA MSGBT2
	STA POINT2
	LDA MSGBT3
	STA POINT3
	LDA MSGBT4
	STA POINT4
	BEGIN
	ASL POINT1
	ROL POINT2
	ROL POINT3
	ROL POINT4
	IFCS
	LDY TEMP3
	LDA Y,MSGCOH
	LDX Y,MSGCOV
	JSR MESGPOS
	LDY TEMP3
	LDA Y,MSGNUM
	TAY
	JSR VGMSG
	THEN
	DEC TEMP3
	MIEND
	RTS

MSGCOV: .BYTE 0,0,0C0,0C0,0C0,60,5C,1C
	.BYTE 50,44,38,2C,20,14,00,5C
	.BYTE 34,28,0C8,28,14,0F0,0F0,0F0
	.BYTE 10,5C,28,28

MSGCOH: .BYTE 0,0,0D0,0D0,0D0,6C,0D0,91
	.BYTE 0D6,0CA,0C7,0D0,0D0,0D9,18,0EC
	.BYTE 0E0,0DA,0D0,0E0,8,30,0C0,0B8
	.BYTE 0F0,0D6,0D8,0D8

MSGNUM:	.BYTE 0,0,0B,9,9,0A,8,7
	.BYTE 0C,0D,0E,0F,10,11,1A,1B
	.BYTE 1C,1D,1E,1F,20,21,22,6
	.BYTE 23,24,25,26

	.PAGE
DRANK:	LDA SCLDRH+7
	LDY I,7
	BEGIN
	ASL
	BCS OUT2
	DEY
	EQEND
OUT2:	STY TEMP3
	LDA Y,RANKH
	LDX I,0
	JSR MESGPOS
	LDY TEMP3
	LDA Y,RANKNO
	TAY
	JSR VGMSG
	LDY I,1A
	JSR VGMSG
	RTS

RANKH:	.BYTE 0E6,0E6,0E0,0E8,0DC,0D4,0CC,0D0

RANKNO: .BYTE 12,13,14,15,16,17,18,19
	.PAGE

	.SBTTL DISPLAY MESSAGES



MPRSTR=0
MGAMOV=1
MOUTFU=2
MSCORE=3
MFUEL =4
MLIVES=5
DMESGE: LDX PLAYUP
	LDA X,STATE
	CMP I,CPAUSE
	BEQ STUPID
	CMP I,CATRM2
	BEQ XCEPT1
	CMP I,CATRM1
	BEQ XCEPT1
	CMP I,CATRCT
	IFEQ
	LDA MSGBT3
	AND I,MTRFUL!MSHBNK?0FF
	STA MSGBT3
XCEPT1: LDA $$CRDT
	IFNE
	JSR NOCOIN
	LDA I,0E0 
	LDX I,34
	JSR MESGPOS
	LDY I,MPRSTR
	JSR VGMSG
	LDA MSGBT3
	AND I,MINCOI?0FF
	ORA I,MCREDS
	ELSE
	JSR COIOPT
	LDA I,MINCOI
	ORA MSGBT3
	AND I,MCREDS?0FF
	THEN
	STA MSGBT3
STUPID:	LDA I,0E6
	LDX I,40
	JSR MESGPOS
	LDY I,MGAMOV
	JSR VGMSG
	LDX PLAYUP
	LDA X,FUEL1
	ORA X,FUEL2
	ORA X,FUEL3
	IFEQ
	LDA X,STATE
	CMP I,CPAUSE
	IFEQ
	LDA I,0E0
	LDX I,38
	JSR MESGPOS
	LDY I,MOUTFU
	JSR VGMSG
	JMP SKIP4
	THEN
	THEN
	THEN
SKIP4:	LDX I,74
	LDA I,0F4
	JSR MESGPOS
	LDY I,MSCORE
	JSR VGMSG
	LDX I,68
	LDA I,0F8
	JSR MESGPOS
	LDY I,MFUEL
	JSR VGMSG
	RTS


COIOPT: LDA OPTSW2
	AND I,3
	TAY
	CPY I,2
	IFNE
	LDA Y,COITBL
	ORA MSGBT4
	STA MSGBT4
	ELSE
	LDA MSGBT3
	ORA I,M1C1PL
	STA MSGBT3
	THEN
	RTS
COITBL: .BYTE 0,4,0,8
NOCOIN: LDA MSGBT4
	AND I,0F3
	STA MSGBT4
	LDA MSGBT3
	AND I,M1C1PL?0FF
	STA MSGBT3
	RTS
DCRED:  LDA ATRAFL
	IFEQ
	LDX PLAYUP
	LDA X,STATE
	CMP I,CGETIN
	IFNE
	LDA $$CRDT
	IFNE
	LDX I,29
	LDA I,8
	LDY I,0
	JSR MESGPOS
	LDA $$CRDT
	JSR DECIMAL
	LDA TEMP2
	SEC
	JSR DIGIT2
	LDA TEMP3
	JSR DIGIT2
	THEN
	LDX PLAYUP
	LDA X,STATE
	CMP I,CATRM1
	IFEQ
	LDA I,0C4
	LDX I,0C6
	JSR MESGPOS
	LXL DCBPVL
	LAH DCBPVL
	JSR VGJSRL
	THEN
	THEN
	THEN
	RTS
DECIMAL: STA TEMP4
	LDY I,7
	LDA I,0
	STA TEMP3
	STA TEMP2
	SED
	BEGIN
	ASL TEMP4
	LDA TEMP3
	ADC TEMP3
	STA TEMP3
	LDA TEMP2
	ADC TEMP2
	STA TEMP2
	DEY
	MIEND
	CLD
	RTS
	.PAGE
	.SBTTL DISPLAY NAME

DNAME:	LDA I,7
	STA TEMP1
	JSR UPDSCA
	BEGIN
	JSR VGCNTR
	LDX TEMP1
	LDY X,NMSCAL
	LDA I,2
	JSR VGSCAL
	LDA TEMP1
	ASL
	TAY
	LDX Y,NAME
	LDA Y,NAME+1
	JSR VGJSRL
	DEC TEMP1
	MIEND
	RTS


UPDSCA: LDA NMSCAL
	IFMI
	LDA NAMCNT
	IFPL
	DEC NAMCNT
	IFMI
	JSR ININAM
	THEN
	THEN
	THEN
	LDX I,7
	BEGIN
	LDA X,NMSCAL
	CLC
	ADC X,SCDLTA
	STA X,NMSCAL
	IFMI
	LDA I,0
	SEC
	SBC X,SCDLTA
	STA X,SCDLTA
	IFPL
	STA X,NMSCAL
	THEN
	THEN
	DEX
	MIEND
	RTS
ININM2: LDX I,7
	BEGIN
	LDA I,7F
	STA X,NMSCAL
	LDA I,3
	STA X,SCDLTA
	DEX
	MIEND
	RTS
ININAM: LDX I,7
	BEGIN
	LDA I,7F
	STA X,NMSCAL
	DEX
	MIEND
	LDX I,7
	BEGIN
	LDA RANDOM
	AND I,7
	ORA I,1
	STA X,SCDLTA
	DEX
	MIEND
	RTS

DIGIT2: PHA
	PHP
	LSR
	LSR
	LSR
	LSR
	PLP
	JSR DIGITZ
	PLA
	AND I,0F
DIGITZ: BCC 10$
	AND I,0F
	BEQ DBLANK
	CLC
10$:	ASL
	PHP
	JSR DSPCHR
	PLP
	RTS
	.PAGE

DBLANK: LDX VGMSGA
	LDA VGMSGA+1
	PHP
	JSR INJSRL
	PLP
	RTS
	.SBTTL	MULTIPLY

;INPUTS MUPYER:MULTIPLYER
;	MUPCAN:MULTIPLICAND
;
;
;
;
;OUTPUTS:RESL=LO BYTE OF PRODUCT
;	 RESH=HI BYTE OF PRODUCT
;	 A,Y-DESTROYED

MULTIPLY:	LDA I,0
	STA RESL		;0 RESULT
	STA RESH
	LDY I,7			;BIT COUNT
	BEGIN
	ASL RESL		;SHIFT RESULT
	ROL RESH
	ASL MUPYER
	IFCS
	LDA MUPCAN
	CLC
	ADC RESL		;ADD IN MULTIPLICAND
	STA RESL
	IFCS
	INC RESH		;CY INTO HI RESULT
	THEN
	THEN
	DEY
	MIEND
	RTS
	HLL65
	.END
                                                                                                                                                                                                                                                                                        